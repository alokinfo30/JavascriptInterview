1)  Create a Simple Todo App

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Todo App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    /* Minimal Tailwind CSS subset for the Todo App */
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .flex-grow { flex-grow: 1; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-l-md { border-top-left-radius: 0.375rem; border-bottom-left-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .rounded-r-md { border-top-right-radius: 0.375rem; border-bottom-right-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .justify-between { justify-content: space-between; }
    .rounded-md { border-radius: 0.375rem; }
    .cursor-pointer { cursor: pointer; }
    .line-through { text-decoration: line-through; }
    .text-gray-500 { color: #6b7280; }
    .text-red-500 { color: #ef4444; }
    .hover\:text-red-700:hover { color: #b91c1c; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const TodoApp = () => {
      const [todos, setTodos] = useState([]);
      const [inputText, setInputText] = useState('');

      const handleInputChange = (e) => {
        setInputText(e.target.value);
      };

      const handleAddTodo = () => {
        if (inputText.trim()) {
          setTodos([...todos, { id: Date.now(), text: inputText, completed: false }]);
          setInputText('');
        }
      };

      const handleToggleTodo = (id) => {
        setTodos(todos.map((todo) => 
          todo.id === id ? { ...todo, completed: !todo.completed } : todo
        ));
      };

      const handleDeleteTodo = (id) => {
        setTodos(todos.filter((todo) => todo.id !== id));
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Todo App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={inputText}
              onChange={handleInputChange}
              placeholder="Add a new todo"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={handleAddTodo}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Add
            </button>
          </div>
          <ul className="space-y-2">
            {todos.map((todo) => (
              <li
                key={todo.id}
                className="flex justify-between items-center p-2 border rounded-md"
              >
                <span
                  onClick={() => handleToggleTodo(todo.id)}
                  className={`cursor-pointer ${todo.completed ? 'line-through text-gray-500' : ''}`}
                >
                  {todo.text}
                </span>
                <button
                  onClick={() => handleDeleteTodo(todo.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    };

    ReactDOM.render(<TodoApp />, document.getElementById('root'));
  </script>
</body>
</html>


======================================================================================================================================================================




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Todo App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const TodoApp = () => {
      const [todos, setTodos] = useState([]);
      const [inputText, setInputText] = useState('');

      const handleInputChange = (e) => {
        setInputText(e.target.value);
      };

      const handleAddTodo = (e) => {
        if (inputText.trim()) {
          setTodos([...todos, { id: Date.now(), text: inputText, completed: false }]);
          setInputText('');
        }
      };

      const handleToggleTodo = (id) => {
        setTodos(todos.map((todo) => 
          todo.id === id ? { ...todo, completed: !todo.completed } : todo)
        ));
      };

      const handleDeleteTodo = = (id) => {
        setTodos(todos.filter((todo) => todo.id !== id));
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Todo App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={inputText}
              onChange={handleInputChange}
              placeholder="Add a new todo"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={handleAddTodo}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Add
            </button>
          </div>
          <ul className="space-y-2">
            {todos.map((todo) => (
              <li
                key={todo.id}
                className="flex justify-between items-center p-2 border rounded-md"
              >
                <span
                  onClick={() => handleToggleTodo(todo.id)}
                  className={`cursor-pointer ${todo.completed ? 'line-through text-gray-500' : ''}`}
                >
                  {todo.text}
                </span>
                <button
                  onClick={() => handleDeleteTodo(todo.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    };

    ReactDOM.render(<TodoApp />, document.getElementById('root'));
  </script>
</body>
</html>
=========================================================================================================================================================================
2)  Build a Counter App

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Counter App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Counter = () => {
      const [count, setCount] = useState(0);

      const handleIncrement = () => {
        setCount(count + 1);
      };

      const handleDecrement = () => {
        setCount(count - 1);
      };

      const handleReset = () => {
        setCount(0);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm text-center">
          <h1 className="text-2xl font-bold mb-4">Counter App</h1>
          <p className="text-4xl font-semibold mb-4">{count}</p>
          <div className="flex justify-center space-x-4">
            <button
              onClick={handleIncrement}
              className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
            >
              Increment
            </button>
            <button
              onClick={handleDecrement}
              className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
            >
              Decrement
            </button>
            <button
              onClick={handleReset}
              className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600"
            >
              Reset
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Counter />, document.getElementById('root'));
  </script>
</body>
</html>

3)  Build a Form Handling Component

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Form Handling</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Form = () => {
      const [formData, setFormData] = useState({ name: '', email: '' });

      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
      };

      const handleSubmit = () => {
        console.log('Form Data:', formData);
        alert(`Submitted: Name=${formData.name}, Email=${formData.email}`);
        setFormData({ name: '', email: '' });
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Form Handling</h1>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Enter your name"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Enter your email"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
            </div>
            <button
              onClick={handleSubmit}
              className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              Submit
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Form />, document.getElementById('root'));
  </script>
</body>
</html>

## Easy Project 4: Create a Modal Component in React

```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modal Component</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .fixed { position: fixed; }
    .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
    .bg-black { background-color: #000; }
    .bg-opacity-50 { background-opacity: 0.5; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-gray-600 { color: #4b5563; }
    .mt-4 { margin-top: 1rem; }
    .bg-red-500 { background-color: #ef4444; }
    .hover\:bg-red-600:hover { background-color: #dc2626; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Modal = ({ isOpen, onClose, title, children }) => {
      if (!isOpen) return null;
      return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-2xl font-bold mb-4">{title}</h2>
            <p className="text-gray-600">{children}</p>
            <button
              onClick={onClose}
              className="mt-4 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
            >
              Close
            </button>
          </div>
        </div>
      );
    };

    const App = () => {
      const [isModalOpen, setIsModalOpen] = useState(false);

      const openModal = () => setIsModalOpen(true);
      const closeModal = () => setIsModalOpen(false);

      return (
        <div>
          <button
            onClick={openModal}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
          >
            Open Modal
          </button>
          <Modal
            isOpen={isModalOpen}
            onClose={closeModal}
            title="Welcome!"
          >
            This is a simple modal component built with React.
          </Modal>
        </div>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Easy Project 5: Implement a Search Bar with Debouncing in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Search Bar with Debouncing</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .mt-4 { margin-top: 1rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const useDebounce = (value, delay) => {
      const [debouncedValue, setDebouncedValue] = useState(value);
      useEffect(() => {
        const handler = setTimeout(() => {
          setDebouncedValue(value);
        }, delay);
        return () => clearTimeout(handler);
      }, [value, delay]);
      return debouncedValue;
    };

    const SearchBar = () => {
      const [searchTerm, setSearchTerm] = useState('');
      const debouncedSearchTerm = useDebounce(searchTerm, 500);

      const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Search Bar</h1>
          <input
            type="text"
            value={searchTerm}
            onChange={handleSearchChange}
            placeholder="Search..."
            className="w-full p-2 border rounded-md focus:outline-none"
          />
          <p className="mt-4 text-gray-600">
            Debounced Search Term: {debouncedSearchTerm || 'None'}
          </p>
        </div>
      );
    };

    ReactDOM.render(<SearchBar />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Easy Project 6: Design a Basic React Router Setup

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Basic React Router</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-router-dom@6.22.3/dist/umd/react-router-dom.production.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-4 { padding: 1rem; }
    .shadow-md { box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); }
    .flex { display: flex; }
    .space-x-4 > :not(:first-child) { margin-left: 1rem; }
    .text-blue-500 { color: #3b82f6; }
    .hover\:text-blue-700:hover { color: #1d4ed8; }
    .p-6 { padding: 1.5rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .text-center { text-align: center; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { BrowserRouter, Routes, Route, Link } = ReactRouterDOM;

    const Home = () => <h1 className="text-2xl font-bold text-center">Home Page</h1>;
    const About = () => <h1 className="text-2xl font-bold text-center">About Page</h1>;
    const Contact = () => <h1 className="text-2xl font-bold text-center">Contact Page</h1>;

    const App = () => {
      return (
        <BrowserRouter>
          <nav className="bg-white p-4 shadow-md">
            <div className="flex space-x-4">
              <Link to="/" className="text-blue-500 hover:text-blue-700">Home</Link>
              <Link to="/about" className="text-blue-500 hover:text-blue-700">About</Link>
              <Link to="/contact" className="text-blue-500 hover:text-blue-700">Contact</Link>
            </div>
          </nav>
          <div className="p-6">
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/about" element={<About />} />
              <Route path="/contact" element={<Contact />} />
            </Routes>
          </div>
        </BrowserRouter>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Easy Project 7: Build a Simple Pagination Component in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pagination Component</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .mt-4 { margin-top: 1rem; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .bg-gray-300 { background-color: #d1d5db; }
    .cursor-not-allowed { cursor: not-allowed; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Pagination = ({ itemsPerPage, totalItems, paginate }) => {
      const pageNumbers = [];
      for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {
        pageNumbers.push(i);
      }

      return (
        <div className="flex space-x-2">
          {pageNumbers.map((number) => (
            <button
              key={number}
              onClick={() => paginate(number)}
              className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              {number}
            </button>
          ))}
        </div>
      );
    };

    const App = () => {
      const [currentPage, setCurrentPage] = useState(1);
      const itemsPerPage = 3;
      const items = Array.from({ length: 10 }, (_, i) => `Item ${i + 1}`);

      const indexOfLastItem = currentPage * itemsPerPage;
      const indexOfFirstItem = indexOfLastItem - itemsPerPage;
      const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);

      const paginate = (pageNumber) => setCurrentPage(pageNumber);

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Pagination</h1>
          <ul className="space-y-2">
            {currentItems.map((item, index) => (
              <li key={index} className="p-2 border rounded-md">{item}</li>
            ))}
          </ul>
          <div className="mt-4 flex justify-center">
            <Pagination
              itemsPerPage={itemsPerPage}
              totalItems={items.length}
              paginate={paginate}
            />
          </div>
        </div>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Easy Project 8: Design a Login Form with Validation using React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login Form with Validation</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .block { display: block; }
    .text-sm { font-size: 0.875rem; }
    .font-medium { font-weight: 500; }
    .mb-1 { margin-bottom: 0.25rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .border-red-500 { border-color: #ef4444; }
    .text-red-500 { color: #ef4444; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const LoginForm = () => {
      const [formData, setFormData] = useState({ email: '', password: '' });
      const [errors, setErrors] = useState({ email: '', password: '' });

      const validate = () => {
        const newErrors = { email: '', password: '' };
        if (!formData.email.includes('@')) {
          newErrors.email = 'Invalid email address';
        }
        if (formData.password.length < 6) {
          newErrors.password = 'Password must be at least 6 characters';
        }
        return newErrors;
      };

      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
      };

      const handleSubmit = () => {
        const validationErrors = validate();
        setErrors(validationErrors);
        if (!validationErrors.email && !validationErrors.password) {
          console.log('Login Data:', formData);
          alert('Login successful!');
          setFormData({ email: '', password: '' });
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Login Form</h1>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Enter your email"
                className={`w-full p-2 border rounded-md focus:outline-none ${errors.email ? 'border-red-500' : ''}`}
              />
              {errors.email && <p className="text-red-500 text-sm">{errors.email}</p>}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="Enter your password"
                className={`w-full p-2 border rounded-md focus:outline-none ${errors.password ? 'border-red-500' : ''}`}
              />
              {errors.password && <p className="text-red-500 text-sm">{errors.password}</p>}
            </div>
            <button
              onClick={handleSubmit}
              className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              Login
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<LoginForm />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Easy Project 9: Build a Simple Dropdown Menu in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dropdown Menu</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .relative { position: relative; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .absolute { position: absolute; }
    .top-full { top: 100%; }
    .left-0 { left: 0; }
    .bg-white { background-color: #fff; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .rounded-md { border-radius: 0.375rem; }
    .w-48 { width: 12rem; }
    .block { display: block; }
    .p-2 { padding: 0.5rem; }
    .text-gray-700 { color: #374151; }
    .hover\:bg-gray-100:hover { background-color: #f3f4f6; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Dropdown = () => {
      const [isOpen, setIsOpen] = useState(false);
      const options = ['Option 1', 'Option 2', 'Option 3'];

      const toggleDropdown = () => setIsOpen(!isOpen);
      const selectOption = (option) => {
        console.log('Selected:', option);
        setIsOpen(false);
      };

      return (
        <div className="relative">
          <button
            onClick={toggleDropdown}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
          >
            Select Option
          </button>
          {isOpen && (
            <div className="absolute top-full left-0 bg-white shadow-lg rounded-md w-48">
              {options.map((option) => (
                <button
                  key={option}
                  onClick={() => selectOption(option)}
                  className="block w-full text-left p-2 text-gray-700 hover:bg-gray-100"
                >
                  {option}
                </button>
              ))}
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<Dropdown />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Easy Project 10: Create a Light/Dark Theme Toggle in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Light/Dark Theme Toggle</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .bg-gray-800 { background-color: #1f2937; }
    .text-gray-800 { color: #1f2937; }
    .text-white { color: #fff; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .bg-gray-900 { background-color: #111827; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .bg-blue-500 { background-color: #3b82f6; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
  </style>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const ThemeToggle = () => {
      const [isDark, setIsDark] = useState(false);

      const toggleTheme = () => {
        setIsDark(!isDark);
      };

      return (
        <div className={`flex items-center justify-center min-h-screen ${isDark ? 'bg-gray-800 text-white' : 'bg-gray-100 text-gray-800'}`}>
          <div className={`bg-${isDark ? 'gray-900' : 'white'} p-6 rounded-lg shadow-lg w-full max-w-md`}>
            <h1 className="text-2xl font-bold mb-4 text-center">Theme Toggle</h1>
            <p className="text-center mb-4">
              Current theme: {isDark ? 'Dark' : 'Light'}
            </p>
            <button
              onClick={toggleTheme}
              className="w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
            >
              Toggle Theme
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<ThemeToggle />, document.getElementById('root'));
  </script>
</body>
</html>

## Medium Project 11: Build a Weather App using React and an API

```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .mt-4 { margin-top: 1rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const WeatherApp = () => {
      const [city, setCity] = useState('');
      const [weather, setWeather] = useState(null);

      // Mock API response for demo (replace with real API call in production)
      const fetchWeather = async (city) => {
        return {
          name: city,
          main: { temp: 25, humidity: 60 },
          weather: [{ description: 'Sunny' }],
        };
      };

      const handleSearch = () => {
        if (city.trim()) {
          fetchWeather(city).then((data) => setWeather(data));
          setCity('');
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Weather App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              placeholder="Enter city"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={handleSearch}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Search
            </button>
          </div>
          {weather && (
            <div className="text-center">
              <p className="text-lg font-semibold">{weather.name}</p>
              <p>Temperature: {weather.main.temp}°C</p>
              <p>Humidity: {weather.main.humidity}%</p>
              <p>Condition: {weather.weather[0].description}</p>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<WeatherApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 12: Create a Chat Application in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Application</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .flex-col { flex-direction: column; }
    .h-64 { height: 16rem; }
    .overflow-y-auto { overflow-y: auto; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .bg-gray-200 { background-color: #e5e7eb; }
    .ml-auto { margin-left: auto; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const ChatApp = () => {
      const [messages, setMessages] = useState([]);
      const [input, setInput] = useState('');

      const sendMessage = () => {
        if (input.trim()) {
          setMessages([...messages, { id: Date.now(), text: input, sender: 'You' }]);
          setInput('');
          // Simulate bot reply
          setTimeout(() => {
            setMessages((prev) => [...prev, { id: Date.now(), text: 'Hi! I am a bot.', sender: 'Bot' }]);
          }, 1000);
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md flex flex-col">
          <h1 className="text-2xl font-bold mb-4 text-center">Chat App</h1>
          <div className="flex-grow h-64 overflow-y-auto space-y-2">
            {messages.map((msg) => (
              <div
                key={msg.id}
                className={`p-2 rounded-md ${msg.sender === 'You' ? 'bg-blue-500 text-white ml-auto' : 'bg-gray-200'}`}
              >
                <strong>{msg.sender}:</strong> {msg.text}
              </div>
            ))}
          </div>
          <div className="flex mt-4">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Type a message"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={sendMessage}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Send
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<ChatApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 13: Build a CRUD Application with React and Firebase

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CRUD Application</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .flex-grow { flex-grow: 1; }
    .bg-red-500 { background-color: #ef4444; }
    .hover\:bg-red-600:hover { background-color: #dc2626; }
    .bg-yellow-500 { background-color: #f59e0b; }
    .hover\:bg-yellow-600:hover { background-color: #d97706; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const CrudApp = () => {
      const [items, setItems] = useState([]);
      const [input, setInput] = useState('');
      const [editId, setEditId] = useState(null);

      // Mock Firebase CRUD operations
      const addItem = () => {
        if (input.trim()) {
          setItems([...items, { id: Date.now(), text: input }]);
          setInput('');
        }
      };

      const updateItem = () => {
        if (input.trim() && editId) {
          setItems(items.map((item) => (item.id === editId ? { ...item, text: input } : item)));
          setInput('');
          setEditId(null);
        }
      };

      const deleteItem = (id) => {
        setItems(items.filter((item) => item.id !== id));
      };

      const startEdit = (item) => {
        setInput(item.text);
        setEditId(item.id);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">CRUD App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Enter item"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={editId ? updateItem : addItem}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              {editId ? 'Update' : 'Add'}
            </button>
          </div>
          <ul className="space-y-2">
            {items.map((item) => (
              <li key={item.id} className="flex items-center p-2 border rounded-md">
                <span className="flex-grow">{item.text}</span>
                <button
                  onClick={() => startEdit(item)}
                  className="bg-yellow-500 text-white p-2 rounded-md hover:bg-yellow-600 mr-2"
                >
                  Edit
                </button>
                <button
                  onClick={() => deleteItem(item.id)}
                  className="bg-red-500 text-white p-2 rounded-md hover:bg-red-600"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    };

    ReactDOM.render(<CrudApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 14: Design a Multi-step Form using React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multi-step Form</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .block { display: block; }
    .text-sm { font-size: 0.875rem; }
    .font-medium { font-weight: 500; }
    .mb-1 { margin-bottom: 0.25rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .bg-gray-500 { background-color: #6b7280; }
    .hover\:bg-gray-600:hover { background-color: #4b5563; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const MultiStepForm = () => {
      const [step, setStep] = useState(1);
      const [formData, setFormData] = useState({ name: '', email: '', phone: '' });

      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
      };

      const nextStep = () => setStep(step + 1);
      const prevStep = () => setStep(step - 1);
      const submitForm = () => {
        console.log('Form Data:', formData);
        alert('Form submitted!');
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Multi-step Form (Step {step}/3)</h1>
          {step === 1 && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Name</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Enter your name"
                  className="w-full p-2 border rounded-md focus:outline-none"
                />
              </div>
              <button
                onClick={nextStep}
                className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Next
              </button>
            </div>
          )}
          {step === 2 && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Email</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="Enter your email"
                  className="w-full p-2 border rounded-md focus:outline-none"
                />
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={prevStep}
                  className="w-full bg-gray-500 text-white p-2 rounded-md hover:bg-gray-600"
                >
                  Previous
                </button>
                <button
                  onClick={nextStep}
                  className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                >
                  Next
                </button>
              </div>
            </div>
          )}
          {step === 3 && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Phone</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="Enter your phone"
                  className="w-full p-2 border rounded-md focus:outline-none"
                />
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={prevStep}
                  className="w-full bg-gray-500 text-white p-2 rounded-md hover:bg-gray-600"
                >
                  Previous
                </button>
                <button
                  onClick={submitForm}
                  className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                >
                  Submit
                </button>
              </div>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<MultiStepForm />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 15: Create a Responsive Sidebar Navigation in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Sidebar Navigation</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .flex { display: flex; }
    .bg-gray-800 { background-color: #1f2937; }
    .text-white { color: #fff; }
    .w-64 { width: 16rem; }
    .p-4 { padding: 1rem; }
    .fixed { position: fixed; }
    .top-0 { top: 0; }
    .left-0 { left: 0; }
    .h-screen { height: 100vh; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .block { display: block; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-gray-700:hover { background-color: #374151; }
    .ml-64 { margin-left: 16rem; }
    .p-6 { padding: 1.5rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .md\:hidden { display: block; }
    @media (min-width: 768px) { .md\:hidden { display: none; } }
    .md\:block { display: none; }
    @media (min-width: 768px) { .md\:block { display: block; } }
    .bg-blue-500 { background-color: #3b82f6; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Sidebar = () => {
      const [isOpen, setIsOpen] = useState(false);
      const navItems = ['Home', 'About', 'Services', 'Contact'];

      return (
        <div>
          <button
            onClick={() => setIsOpen(!isOpen)}
            className="md:hidden bg-blue-500 text-white px-4 py-2 rounded-md fixed top-4 left-4"
          >
            Menu
          </button>
          <div className={`fixed top-0 left-0 h-screen bg-gray-800 text-white w-64 p-4 ${isOpen ? 'block' : 'hidden'} md:block`}>
            <h2 className="text-2xl font-bold mb-4">Sidebar</h2>
            <nav className="space-y-4">
              {navItems.map((item) => (
                <a
                  key={item}
                  href={`#${item.toLowerCase()}`}
                  className="block py-2 px-4 rounded-md hover:bg-gray-700"
                >
                  {item}
                </a>
              ))}
            </nav>
          </div>
          <div className="ml-64 p-6">
            <h1 className="text-2xl font-bold">Main Content</h1>
            <p>Click the menu button on mobile to toggle the sidebar.</p>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Sidebar />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 16: Build a Dynamic Data Table with Sorting & Pagination

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dynamic Data Table</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-4xl { max-width: 56rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .p-4 { padding: 1rem; }
    .bg-gray-200 { background-color: #e5e7eb; }
    .cursor-pointer { cursor: pointer; }
    .hover\:bg-blue-100:hover { background-color: #dbeafe; }
    .mt-4 { margin-top: 1rem; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const DataTable = () => {
      const [data, setData] = useState([
        { id: 1, name: 'Alice', age: 25 },
        { id: 2, name: 'Bob', age: 30 },
        { id: 3, name: 'Charlie', age: 35 },
        { id: 4, name: 'David', age: 28 },
        { id: 5, name: 'Eve', age: 22 },
      ]);
      const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
      const [currentPage, setCurrentPage] = useState(1);
      const itemsPerPage = 3;

      const sortData = (key) => {
        let direction = 'asc';
        if (sortConfig.key === key && sortConfig.direction === 'asc') {
          direction = 'desc';
        }
        const sorted = [...data].sort((a, b) => {
          if (a[key] < b[key]) return direction === 'asc' ? -1 : 1;
          if (a[key] > b[key]) return direction === 'asc' ? 1 : -1;
          return 0;
        });
        setData(sorted);
        setSortConfig({ key, direction });
      };

      const indexOfLastItem = currentPage * itemsPerPage;
      const indexOfFirstItem = indexOfLastItem - itemsPerPage;
      const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);
      const totalPages = Math.ceil(data.length / itemsPerPage);

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-4xl">
          <h1 className="text-2xl font-bold mb-4 text-center">Data Table</h1>
          <table className="w-full border">
            <thead>
              <tr className="bg-gray-200">
                <th className="p-4 cursor-pointer" onClick={() => sortData('id')}>
                  ID {sortConfig.key === 'id' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
                <th className="p-4 cursor-pointer" onClick={() => sortData('name')}>
                  Name {sortConfig.key === 'name' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
                <th className="p-4 cursor-pointer" onClick={() => sortData('age')}>
                  Age {sortConfig.key === 'age' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
              </tr>
            </thead>
            <tbody>
              {currentItems.map((item) => (
                <tr key={item.id} className="border hover:bg-blue-100">
                  <td className="p-4">{item.id}</td>
                  <td className="p-4">{item.name}</td>
                  <td className="p-4">{item.age}</td>
                </tr>
              ))}
            </tbody>
          </table>
          <div className="mt-4 flex justify-center space-x-2">
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i + 1}
                onClick={() => setCurrentPage(i + 1)}
                className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                {i + 1}
              </button>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<DataTable />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 17: Build a Custom Hook for Form Validation

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Custom Hook for Form Validation</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .block { display: block; }
    .text-sm { font-size: 0.875rem; }
    .font-medium { font-weight: 500; }
    .mb-1 { margin-bottom: 0.25rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .border-red-500 { border-color: #ef4444; }
    .text-red-500 { color: #ef4444; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const useFormValidation = (initialValues, validate) => {
      const [values, setValues] = useState(initialValues);
      const [errors, setErrors] = useState({});

      const handleChange = (e) => {
        const { name, value } = e.target;
        setValues({ ...values, [name]: value });
        setErrors({ ...errors, [name]: validate[name](value) });
      };

      const handleSubmit = (callback) => {
        const newErrors = {};
        Object.keys(values).forEach((key) => {
          newErrors[key] = validate[key](values[key]);
        });
        setErrors(newErrors);
        if (Object.values(newErrors).every((error) => !error)) {
          callback(values);
        }
      };

      return { values, errors, handleChange, handleSubmit };
    };

    const FormWithValidation = () => {
      const validate = {
        email: (value) => (value.includes('@') ? '' : 'Invalid email'),
        password: (value) => (value.length >= 6 ? '' : 'Password must be 6+ characters'),
      };

      const { values, errors, handleChange, handleSubmit } = useFormValidation(
        { email: '', password: '' },
        validate
      );

      const onSubmit = (data) => {
        console.log('Form Data:', data);
        alert('Form submitted!');
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Form Validation</h1>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={values.email}
                onChange={handleChange}
                placeholder="Enter your email"
                className={`w-full p-2 border rounded-md focus:outline-none ${errors.email ? 'border-red-500' : ''}`}
              />
              {errors.email && <p className="text-red-500 text-sm">{errors.email}</p>}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Password</label>
              <input
                type="password"
                name="password"
                value={values.password}
                onChange={handleChange}
                placeholder="Enter your password"
                className={`w-full p-2 border rounded-md focus:outline-none ${errors.password ? 'border-red-500' : ''}`}
              />
              {errors.password && <p className="text-red-500 text-sm">{errors.password}</p>}
            </div>
            <button
              onClick={() => handleSubmit(onSubmit)}
              className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              Submit
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<FormWithValidation />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 18: Design a Responsive Layout using React and CSS Grid

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Layout</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .lg\:grid-cols-3 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    @media (min-width: 768px) { .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    @media (min-width: 1024px) { .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); } }
    .gap-4 { gap: 1rem; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const Layout = () => {
      const items = Array.from({ length: 6 }, (_, i) => `Item ${i + 1}`);

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Responsive Grid Layout</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {items.map((item, index) => (
              <div key={index} className="bg-white p-6 rounded-lg shadow-lg text-center">
                <h2 className="text-lg font-semibold">{item}</h2>
                <p className="text-gray-600">Responsive card content.</p>
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<Layout />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 19: Build an Image Carousel Component in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Image Carousel</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .relative { position: relative; }
    .h-64 { height: 16rem; }
    .object-cover { object-fit: cover; }
    .absolute { position: absolute; }
    .top-1\/2 { top: 50%; }
    .transform { transform: translateY(-50%); }
    .left-0 { left: 0; }
    .right-0 { right: 0; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .p-2 { padding: 0.5rem; }
    .rounded-full { border-radius: 9999px; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Carousel = () => {
      const images = [
        'https://via.placeholder.com/600x400?text=Image+1',
        'https://via.placeholder.com/600x400?text=Image+2',
        'https://via.placeholder.com/600x400?text=Image+3',
      ];
      const [currentIndex, setCurrentIndex] = useState(0);

      const prevSlide = () => {
        setCurrentIndex((prev) => (prev === 0 ? images.length - 1 : prev - 1));
      };

      const nextSlide = () => {
        setCurrentIndex((prev) => (prev === images.length - 1 ? 0 : prev + 1));
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl">
          <h1 className="text-2xl font-bold mb-4 text-center">Image Carousel</h1>
          <div className="relative">
            <img
              src={images[currentIndex]}
              alt="Carousel"
              className="w-full h-64 object-cover rounded-md"
            />
            <button
              onClick={prevSlide}
              className="absolute top-1/2 left-0 transform bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600"
            >
              ←
            </button>
            <button
              onClick={nextSlide}
              className="absolute top-1/2 right-0 transform bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600"
            >
              →
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Carousel />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 20: Create a Drag-and-Drop Interface in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Drag and Drop Interface</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .p-4 { padding: 1rem; }
    .rounded-md { border-radius: 0.375rem; }
    .bg-blue-100 { background-color: #dbeafe; }
    .cursor-move { cursor: move; }
    .bg-yellow-100 { background-color: #fefcbf; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const DragDrop = () => {
      const [items, setItems] = useState(['Item 1', 'Item 2', 'Item 3']);
      const [draggedItem, setDraggedItem] = useState(null);

      const handleDragStart = (e, index) => {
        setDraggedItem(index);
        e.dataTransfer.setData('text/plain', index);
      };

      const handleDragOver = (e) => {
        e.preventDefault();
      };

      const handleDrop = (e, index) => {
        e.preventDefault();
        const draggedIndex = Number(e.dataTransfer.getData('text/plain'));
        const newItems = [...items];
        const [dragged] = newItems.splice(draggedIndex, 1);
        newItems.splice(index, 0, dragged);
        setItems(newItems);
        setDraggedItem(null);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Drag and Drop</h1>
          <div className="space-y-2">
            {items.map((item, index) => (
              <div
                key={index}
                draggable
                onDragStart={(e) => handleDragStart(e, index)}
                onDragOver={handleDragOver}
                onDrop={(e) => handleDrop(e, index)}
                className={`p-4 border rounded-md ${draggedItem === index ? 'bg-yellow-100' : 'bg-blue-100'} cursor-move`}
              >
                {item}
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<DragDrop />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 21: Implement a Search Filter for a List of Items

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Search Filter</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const SearchFilter = () => {
      const items = ['Apple', 'Banana', 'Orange', 'Mango', 'Pineapple'];
      const [searchTerm, setSearchTerm] = useState('');

      const filteredItems = items.filter((item) =>
        item.toLowerCase().includes(searchTerm.toLowerCase())
      );

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Search Filter</h1>
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search items..."
            className="w-full p-2 border rounded-md focus:outline-none"
          />
          <ul className="space-y-2 mt-4">
            {filteredItems.map((item, index) => (
              <li key={index} className="p-2 border rounded-md text-gray-600">
                {item}
              </li>
            ))}
          </ul>
        </div>
      );
    };

    ReactDOM.render(<SearchFilter />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 22: Build a Movie Search App using React and an API

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Movie Search App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .mt-4 { margin-top: 1rem; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    @media (min-width: 768px) { .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    .gap-4 { gap: 1rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const MovieSearchApp = () => {
      const [searchTerm, setSearchTerm] = useState('');
      const [movies, setMovies] = useState([]);

      // Mock API response
      const fetchMovies = async (query) => {
        return [
          { id: 1, title: `${query} Movie 1`, year: 2020 },
          { id: 2, title: `${query} Movie 2`, year: 2021 },
        ];
      };

      const handleSearch = () => {
        if (searchTerm.trim()) {
          fetchMovies(searchTerm).then((data) => setMovies(data));
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl">
          <h1 className="text-2xl font-bold mb-4 text-center">Movie Search</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search movies..."
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={handleSearch}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Search
            </button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {movies.map((movie) => (
              <div key={movie.id} className="p-4 border rounded-md">
                <h3 className="font-semibold">{movie.title}</h3>
                <p className="text-gray-600">Year: {movie.year}</p>
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<MovieSearchApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 23: Implement Infinite Scrolling in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Infinite Scroll</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-4 { padding: 1rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect, useRef } = React;

    const InfiniteScroll = () => {
      const [items, setItems] = useState([]);
      const [page, setPage] = useState(1);
      const [loading, setLoading] = useState(false);
      const loaderRef = useRef(null);

      const fetchItems = async (page) => {
        // Mock API call
        return Array.from({ length: 10 }, (_, i) => `Item ${(page - 1) * 10 + i + 1}`);
      };

      const loadMore = async () => {
        setLoading(true);
        const newItems = await fetchItems(page);
        setItems((prev) => [...prev, ...newItems]);
        setLoading(false);
      };

      useEffect(() => {
        loadMore();
      }, [page]);

      useEffect(() => {
        const observer = new IntersectionObserver(
          (entries) => {
            if (entries[0].isIntersecting && !loading) {
              setPage((prev) => prev + 1);
            }
          },
          { threshold: 1.0 }
        );
        if (loaderRef.current) observer.observe(loaderRef.current);
        return () => observer.disconnect();
      }, [loading]);

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Infinite Scroll</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto">
            <div className="space-y-2">
              {items.map((item, index) => (
                <div key={index} className="p-4 border rounded-md text-gray-600">
                  {item}
                </div>
              ))}
            </div>
            <div ref={loaderRef} className="text-center mt-4">
              {loading && <p>Loading...</p>}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<InfiniteScroll />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 24: Build a Component with Context API for State Management

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Context API State Management</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .p-2 { padding: 0.5rem; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { createContext, useContext, useState } = React;

    const ThemeContext = createContext();

    const ThemeProvider = ({ children }) => {
      const [theme, setTheme] = useState('light');

      const toggleTheme = () => {
        setTheme(theme === 'light' ? 'dark' : 'light');
      };

      return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
          {children}
        </ThemeContext.Provider>
      );
    };

    const ThemeToggle = () => {
      const { theme, toggleTheme } = useContext(ThemeContext);
      return (
        <button
          onClick={toggleTheme}
          className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
        >
          Toggle to {theme === 'light' ? 'Dark' : 'Light'} Theme
        </button>
      );
    };

    const Display = () => {
      const { theme } = useContext(ThemeContext);
      return (
        <p className="text-gray-600">Current Theme: {theme}</p>
      );
    };

    const App = () => {
      return (
        <ThemeProvider>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h1 className="text-2xl font-bold mb-4 text-center">Context API</h1>
            <Display />
            <ThemeToggle />
          </div>
        </ThemeProvider>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>

## Medium Project 25: Create a File Upload Component in React

```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>File Upload Component</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .mt-4 { margin-top: 1rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const FileUpload = () => {
      const [file, setFile] = useState(null);
      const [fileName, setFileName] = useState('');

      const handleFileChange = (e) => {
        const selectedFile = e.target.files[0];
        if (selectedFile) {
          setFile(selectedFile);
          setFileName(selectedFile.name);
          // Mock upload
          console.log('Uploading:', selectedFile.name);
        }
      };

      const handleUpload = () => {
        if (file) {
          alert(`File ${fileName} uploaded successfully!`);
          setFile(null);
          setFileName('');
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">File Upload</h1>
          <input
            type="file"
            onChange={handleFileChange}
            className="w-full p-2 border rounded-md focus:outline-none"
          />
          {fileName && <p className="mt-4 text-gray-600">Selected: {fileName}</p>}
          <button
            onClick={handleUpload}
            disabled={!file}
            className={`mt-4 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 ${!file ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            Upload
          </button>
        </div>
      );
    };

    ReactDOM.render(<FileUpload />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 26: Build a Real-time Voting App in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Real-time Voting App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const VotingApp = () => {
      const [votes, setVotes] = useState({ option1: 0, option2: 0, option3: 0 });

      // Mock real-time update
      const handleVote = (option) => {
        setVotes((prev) => ({ ...prev, [option]: prev[option] + 1 }));
        // Simulate server update
        console.log(`Voted for ${option}`);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Voting App</h1>
          <div className="space-y-2">
            {Object.keys(votes).map((option) => (
              <div key={option} className="flex items-center justify-between p-2 border rounded-md">
                <span className="text-gray-600">
                  Option {option.slice(-1)}: {votes[option]} votes
                </span>
                <button
                  onClick={() => handleVote(option)}
                  className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                >
                  Vote
                </button>
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<VotingApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 27: Create a Comment System with Nested Replies in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Comment System</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .ml-6 { margin-left: 1.5rem; }
    .text-gray-600 { color: #4b5563; }
    .text-sm { font-size: 0.875rem; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Comment = ({ comment, onReply }) => {
      const [replyText, setReplyText] = useState('');
      const [showReply, setShowReply] = useState(false);

      const handleReply = () => {
        if (replyText.trim()) {
          onReply(comment.id, replyText);
          setReplyText('');
          setShowReply(false);
        }
      };

      return (
        <div className="p-2 border rounded-md">
          <p className="text-gray-600">{comment.text}</p>
          <button
            onClick={() => setShowReply(!showReply)}
            className="text-blue-500 text-sm"
          >
            {showReply ? 'Cancel' : 'Reply'}
          </button>
          {showReply && (
            <div className="mt-2">
              <input
                type="text"
                value={replyText}
                onChange={(e) => setReplyText(e.target.value)}
                placeholder="Write a reply..."
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <button
                onClick={handleReply}
                className="mt-2 bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Submit
              </button>
            </div>
          )}
          {comment.replies && comment.replies.length > 0 && (
            <div className="ml-6 mt-2 space-y-2">
              {comment.replies.map((reply) => (
                <Comment key={reply.id} comment={reply} onReply={onReply} />
              ))}
            </div>
          )}
        </div>
      );
    };

    const CommentSystem = () => {
      const [comments, setComments] = useState([]);
      const [commentText, setCommentText] = useState('');

      const addComment = () => {
        if (commentText.trim()) {
          setComments([...comments, { id: Date.now(), text: commentText, replies: [] }]);
          setCommentText('');
        }
      };

      const addReply = (commentId, replyText) => {
        const updateComments = (comments) =>
          comments.map((comment) => {
            if (comment.id === commentId) {
              return {
                ...comment,
                replies: [...comment.replies, { id: Date.now(), text: replyText, replies: [] }],
              };
            }
            return { ...comment, replies: updateComments(comment.replies) };
          });
        setComments(updateComments(comments));
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl">
          <h1 className="text-2xl font-bold mb-4 text-center">Comment System</h1>
          <div className="mb-4">
            <input
              type="text"
              value={commentText}
              onChange={(e) => setCommentText(e.target.value)}
              placeholder="Write a comment..."
              className="w-full p-2 border rounded-md focus:outline-none"
            />
            <button
              onClick={addComment}
              className="mt-2 bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              Submit
            </button>
          </div>
          <div className="space-y-4">
            {comments.map((comment) => (
              <Comment key={comment.id} comment={comment} onReply={addReply} />
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<CommentSystem />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 28: Build a Quiz Application with Score Tracking in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quiz Application</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .bg-green-500 { background-color: #10b981; }
    .bg-red-500 { background-color: #ef4444; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const QuizApp = () => {
      const questions = [
        {
          id: 1,
          question: 'What is 2 + 2?',
          options: ['3', '4', '5', '6'],
          answer: '4',
        },
        {
          id: 2,
          question: 'What is the capital of France?',
          options: ['Paris', 'London', 'Berlin', 'Madrid'],
          answer: 'Paris',
        },
      ];
      const [currentQuestion, setCurrentQuestion] = useState(0);
      const [score, setScore] = useState(0);
      const [showResult, setShowResult] = useState(false);

      const handleAnswer = (option) => {
        if (option === questions[currentQuestion].answer) {
          setScore(score + 1);
        }
        if (currentQuestion < questions.length - 1) {
          setCurrentQuestion(currentQuestion + 1);
        } else {
          setShowResult(true);
        }
      };

      const resetQuiz = () => {
        setCurrentQuestion(0);
        setScore(0);
        setShowResult(false);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Quiz App</h1>
          {!showResult ? (
            <div>
              <p className="text-lg mb-4">
                Question {currentQuestion + 1}/{questions.length}: {questions[currentQuestion].question}
              </p>
              <div className="space-y-2">
                {questions[currentQuestion].options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleAnswer(option)}
                    className="w-full p-2 border rounded-md hover:bg-blue-600 hover:text-white"
                  >
                    {option}
                  </button>
                ))}
              </div>
            </div>
          ) : (
            <div className="text-center">
              <p className="text-lg mb-4">Your Score: {score}/{questions.length}</p>
              <button
                onClick={resetQuiz}
                className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Restart Quiz
              </button>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<QuizApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 29: Implement Authentication with Firebase in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Authentication</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const AuthApp = () => {
      const [user, setUser] = useState(null);
      const [email, setEmail] = useState('');
      const [password, setPassword] = useState('');

      // Mock Firebase authentication
      const login = () => {
        if (email && password) {
          setUser({ email });
          console.log('Logged in:', email);
          setEmail('');
          setPassword('');
        }
      };

      const logout = () => {
        setUser(null);
        console.log('Logged out');
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Authentication</h1>
          {user ? (
            <div className="text-center">
              <p className="text-gray-600 mb-4">Welcome, {user.email}!</p>
              <button
                onClick={logout}
                className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Logout
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Password"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <button
                onClick={login}
                className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Login
              </button>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<AuthApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Medium Project 30: Build a Blog Platform with Markdown Support in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Blog Platform</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked@5.0.2/lib/marked.umd.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .text-gray-600 { color: #4b5563; }
    .prose { max-width: 65ch; }
  </style>
</head>
<body className="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const BlogPlatform = () => {
      const [posts, setPosts] = useState([]);
      const [title, setTitle] = useState('');
      const [content, setContent] = useState('');

      const addPost = () => {
        if (title.trim() && content.trim()) {
          setPosts([...posts, { id: Date.now(), title, content: marked.parse(content) }]);
          setTitle('');
          setContent('');
        }
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Blog Platform</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto mb-6">
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Post Title"
              className="w-full p-2 border rounded-md focus:outline-none mb-4"
            />
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Write in Markdown..."
              className="w-full p-2 border rounded-md focus:outline-none h-32"
            ></textarea>
            <button
              onClick={addPost}
              className="mt-4 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              Publish
            </button>
          </div>
          <div className="space-y-4 w-full max-w-2xl mx-auto">
            {posts.map((post) => (
              <div key={post.id} className="bg-white p-6 rounded-lg shadow-lg">
                <h2 className="text-xl font-bold mb-2">{post.title}</h2>
                <div className="prose text-gray-600" dangerouslySetInnerHTML={{ __html: post.content }} />
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<BlogPlatform />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 31: Build a Real-time Collaborative Text Editor in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Collaborative Text Editor</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .h-64 { height: 16rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const CollaborativeEditor = () => {
      const [text, setText] = useState('');

      // Mock real-time collaboration with local storage
      useEffect(() => {
        const savedText = localStorage.getItem('collabText') || '';
        setText(savedText);

        const handleStorageChange = (e) => {
          if (e.key === 'collabText') {
            setText(e.newValue || '');
          }
        };

        window.addEventListener('storage', handleStorageChange);
        return () => window.removeEventListener('storage', handleStorageChange);
      }, []);

      const handleChange = (e) => {
        const newText = e.target.value;
        setText(newText);
        localStorage.setItem('collabText', newText);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl">
          <h1 className="text-2xl font-bold mb-4 text-center">Collaborative Editor</h1>
          <textarea
            value={text}
            onChange={handleChange}
            placeholder="Start typing..."
            className="w-full p-2 border rounded-md focus:outline-none h-64"
          ></textarea>
          <p className="text-gray-600 text-sm mt-2">
            Open in another tab to simulate real-time collaboration.
          </p>
        </div>
      );
    };

    ReactDOM.render(<CollaborativeEditor />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 32: Create a Kanban Board Application in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kanban Board</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .flex { display: flex; }
    .space-x-4 > :not(:first-child) { margin-left: 1rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-64 { width: 16rem; }
    .p-4 { padding: 1rem; }
    .text-xl { font-size: 1.25rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .cursor-move { cursor: move; }
    .bg-blue-100 { background-color: #dbeafe; }
    .text-gray-600 { color: #4b5563; }
    .text-2xl { font-size: 1.5rem; }
    .text-center { text-align: center; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const KanbanBoard = () => {
      const [columns, setColumns] = useState({
        todo: [
          { id: 1, text: 'Task 1' },
          { id: 2, text: 'Task 2' },
        ],
        inProgress: [{ id: 3, text: 'Task 3' }],
        done: [],
      });

      const handleDragStart = (e, taskId, sourceCol) => {
        e.dataTransfer.setData('taskId', taskId);
        e.dataTransfer.setData('sourceCol', sourceCol);
      };

      const handleDragOver = (e) => {
        e.preventDefault();
      };

      const handleDrop = (e, targetCol) => {
        const taskId = Number(e.dataTransfer.getData('taskId'));
        const sourceCol = e.dataTransfer.getData('sourceCol');

        if (sourceCol !== targetCol) {
          const task = columns[sourceCol].find((t) => t.id === taskId);
          setColumns((prev) => ({
            ...prev,
            [sourceCol]: prev[sourceCol].filter((t) => t.id !== taskId),
            [targetCol]: [...prev[targetCol], task],
          }));
        }
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Kanban Board</h1>
          <div className="flex space-x-4">
            {Object.keys(columns).map((col) => (
              <div
                key={col}
                onDragOver={handleDragOver}
                onDrop={(e) => handleDrop(e, col)}
                className="bg-white p-4 rounded-lg shadow-lg w-64"
              >
                <h2 className="text-xl font-bold mb-4 capitalize">{col.replace(/([A-Z])/g, ' $1')}</h2>
                <div className="space-y-2">
                  {columns[col].map((task) => (
                    <div
                      key={task.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, task.id, col)}
                      className="p-2 border rounded-md bg-blue-100 cursor-move text-gray-600"
                    >
                      {task.text}
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<KanbanBoard />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 33: Implement a Video Streaming App in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Streaming App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-4xl { max-width: 56rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    @media (min-width: 768px) { .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    .gap-4 { gap: 1rem; }
    .p-4 { padding: 1rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .cursor-pointer { cursor: pointer; }
    .hover\:bg-blue-100:hover { background-color: #dbeafe; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const VideoStreamingApp = () => {
      const videos = [
        { id: 1, title: 'Video 1', url: 'https://www.w3schools.com/html/mov_bbb.mp4' },
        { id: 2, title: 'Video 2', url: 'https://www.w3schools.com/html/movie.mp4' },
      ];
      const [currentVideo, setCurrentVideo] = useState(videos[0]);

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Video Streaming</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-4xl mx-auto">
            <video
              src={currentVideo.url}
              controls
              className="w-full rounded-md mb-4"
            ></video>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {videos.map((video) => (
                <div
                  key={video.id}
                  onClick={() => setCurrentVideo(video)}
                  className="p-4 border rounded-md cursor-pointer hover:bg-blue-100"
                >
                  <h3 className="font-semibold">{video.title}</h3>
                  <p className="text-gray-600">Click to play</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<VideoStreamingApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 34: Build a Task Management App with Recurring Tasks

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Task Management App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .flex { display: flex; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
    .text-gray-600 { color: #4b5563; }
    .bg-red-500 { background-color: #ef4444; }
    .hover\:bg-red-600:hover { background-color: #dc2626; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const TaskManagementApp = () => {
      const [tasks, setTasks] = useState([]);
      const [taskText, setTaskText] = useState('');
      const [isRecurring, setIsRecurring] = useState(false);

      const addTask = () => {
        if (taskText.trim()) {
          setTasks([...tasks, { id: Date.now(), text: taskText, completed: false, recurring: isRecurring }]);
          setTaskText('');
          setIsRecurring(false);
        }
      };

      const toggleTask = (id) => {
        setTasks(
          tasks.map((task) =>
            task.id === id
              ? { ...task, completed: !task.completed }
              : task
          )
        );
      };

      const deleteTask = (id) => {
        setTasks(tasks.filter((task) => task.id !== id));
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Task Management</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto">
            <div className="flex mb-4">
              <input
                type="text"
                value={taskText}
                onChange={(e) => setTaskText(e.target.value)}
                placeholder="Add a task"
                className="flex-grow p-2 border rounded-l-md focus:outline-none"
              />
              <button
                onClick={addTask}
                className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
              >
                Add
              </button>
            </div>
            <label className="flex items-center mb-4">
              <input
                type="checkbox"
                checked={isRecurring}
                onChange={() => setIsRecurring(!isRecurring)}
                className="mr-2"
              />
              <span className="text-gray-600">Recurring Task</span>
            </label>
            <div className="space-y-2">
              {tasks.map((task) => (
                <div
                  key={task.id}
                  className="flex items-center p-2 border rounded-md"
                >
                  <input
                    type="checkbox"
                    checked={task.completed}
                    onChange={() => toggleTask(task.id)}
                    className="mr-2"
                  />
                  <span
                    className={`flex-grow text-gray-600 ${task.completed ? 'line-through' : ''}`}
                  >
                    {task.text} {task.recurring && '(Recurring)'}
                  </span>
                  <button
                    onClick={() => deleteTask(task.id)}
                    className="bg-red-500 text-white p-2 rounded-md hover:bg-red-600"
                  >
                    Delete
                  </button>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<TaskManagementApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 35: Create a Chat App with Video Call Feature in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with Video Call</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .flex-col { flex-direction: column; }
    .h-64 { height: 16rem; }
    .overflow-y-auto { overflow-y: auto; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .bg-gray-200 { background-color: #e5e7eb; }
    .ml-auto { margin-left: auto; }
    .bg-green-500 { background-color: #10b981; }
    .hover\:bg-green-600:hover { background-color: #059669; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const ChatVideoApp = () => {
      const [messages, setMessages] = useState([]);
      const [input, setInput] = useState('');
      const [isVideoCall, setIsVideoCall] = useState(false);

      const sendMessage = () => {
        if (input.trim()) {
          setMessages([...messages, { id: Date.now(), text: input, sender: 'You' }]);
          setInput('');
          setTimeout(() => {
            setMessages((prev) => [...prev, { id: Date.now(), text: 'Hi! I am a bot.', sender: 'Bot' }]);
          }, 1000);
        }
      };

      const startVideoCall = () => {
        setIsVideoCall(true);
        console.log('Starting mock video call');
      };

      const endVideoCall = () => {
        setIsVideoCall(false);
        console.log('Ending mock video call');
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl flex flex-col">
          <h1 className="text-2xl font-bold mb-4 text-center">Chat with Video Call</h1>
          {isVideoCall ? (
            <div className="mb-4">
              <div className="bg-gray-200 h-64 rounded-md flex items-center justify-center">
                <p className="text-gray-600">Mock Video Call Interface</p>
              </div>
              <button
                onClick={endVideoCall}
                className="mt-4 w-full bg-red-500 text-white p-2 rounded-md hover:bg-red-600"
              >
                End Call
              </button>
            </div>
          ) : (
            <div>
              <div className="flex-grow h-64 overflow-y-auto space-y-2 mb-4">
                {messages.map((msg) => (
                  <div
                    key={msg.id}
                    className={`p-2 rounded-md ${msg.sender === 'You' ? 'bg-blue-500 text-white ml-auto' : 'bg-gray-200'}`}
                  >
                    <strong>{msg.sender}:</strong> {msg.text}
                  </div>
                ))}
              </div>
              <div className="flex mb-4">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Type a message"
                  className="flex-grow p-2 border rounded-l-md focus:outline-none"
                />
                <button
                  onClick={sendMessage}
                  className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
                >
                  Send
                </button>
              </div>
              <button
                onClick={startVideoCall}
                className="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-600"
              >
                Start Video Call
              </button>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<ChatVideoApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 36: Build an E-commerce Store with Cart Functionality

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>E-commerce Store</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    @media (min-width: 768px) { .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    .gap-4 { gap: 1rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .p-4 { padding: 1rem; }
    .text-xl { font-size: 1.25rem; }
    .font-bold { font-weight: 700; }
    .mb-2 { margin-bottom: 0.5rem; }
    .text-gray-600 { color: #4b5563; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .p-2 { padding: 0.5rem; }
    .rounded-md { border-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .text-2xl { font-size: 1.5rem; }
    .text-center { text-align: center; }
    .mb-4 { margin-bottom: 1rem; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .bg-red-500 { background-color: #ef4444; }
    .hover\:bg-red-600:hover { background-color: #dc2626; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const ECommerceStore = () => {
      const products = [
        { id: 1, name: 'Product A', price: 20 },
        { id: 2, name: 'Product B', price: 30 },
        { id: 3, name: 'Product C', price: 40 },
      ];
      const [cart, setCart] = useState([]);

      const addToCart = (product) => {
        const existing = cart.find((item) => item.id === product.id);
        if (existing) {
          setCart(
            cart.map((item) =>
              item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
            )
          );
        } else {
          setCart([...cart, { ...product, quantity: 1 }]);
        }
      };

      const removeFromCart = (id) => {
        setCart(cart.filter((item) => item.id !== id));
      };

      const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">E-commerce Store</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            {products.map((product) => (
              <div key={product.id} className="bg-white p-4 rounded-lg shadow-lg">
                <h2 className="text-xl font-bold mb-2">{product.name}</h2>
                <p className="text-gray-600 mb-2">${product.price}</p>
                <button
                  onClick={() => addToCart(product)}
                  className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                >
                  Add to Cart
                </button>
              </div>
            ))}
          </div>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto">
            <h2 className="text-xl font-bold mb-4">Cart</h2>
            <div className="space-y-2">
              {cart.map((item) => (
                <div key={item.id} className="flex items-center p-2 border rounded-md">
                  <span className="flex-grow text-gray-600">
                    {item.name} x {item.quantity} - ${item.price * item.quantity}
                  </span>
                  <button
                    onClick={() => removeFromCart(item.id)}
                    className="bg-red-500 text-white p-2 rounded-md hover:bg-red-600"
                  >
                    Remove
                  </button>
                </div>
              ))}
            </div>
            <p className="text-xl font-bold mt-4">Total: ${total}</p>
          </div>
        </div>
      );
    };

    ReactDOM.render(<ECommerceStore />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 37: Implement a File Sharing App in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>File Sharing App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375remprocesses all the code within one page; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .mt-4 { margin-top: 1rem; }
    .text-gray-600 { color: #4b5563; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const FileSharingApp = () => {
      const [files, setFiles] = useState([]);
      const [file, setFile] = useState(null);

      const handleFileChange = (e) => {
        const selectedFile = e.target.files[0];
        if (selectedFile) {
          setFile(selectedFile);
        }
      };

      const handleUpload = () => {
        if (file) {
          const fileUrl = URL.createObjectURL(file);
          setFiles([...files, { id: Date.now(), name: file.name, url: fileUrl }]);
          setFile(null);
          console.log('File uploaded:', file.name);
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">File Sharing</h1>
          <input
            type="file"
            onChange={handleFileChange}
            className="w-full p-2 border rounded-md focus:outline-none"
          />
          <button
            onClick={handleUpload}
            disabled={!file}
            className={`mt-4 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 ${!file ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            Upload
          </button>
          <div className="mt-4 space-y-2">
            {files.map((file) => (
              <div key={file.id} className="p-2 border rounded-md">
                <a href={file.url} download className="text-blue-500 hover:text-blue-600">
                  {file.name}
                </a>
              </div>
            ))}
          </div>
        </div>
      );
    };

    ReactDOM.render(<FileSharingApp />, document.getElementById('root'));
  </script>
</body>
</html>
</html>
```

---

## Hard Project 38: Create a Dashboard with Interactive Charts in React

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    @media (min-width: 768px) { .md:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    .gap-4 { gap: 1rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .p-4 { padding: 1rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .w-full { width: 100%; }
    .max-w-4xl { max-width: 56rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useEffect, useRef } = React;

    const ChartComponent = ({ type, data, title }) => {
      const canvasRef = useRef(null);
      const chartRef = useRef(null);

      useEffect(() => {
        if (canvasRef.current) {
          if (chartRef.current) chartRef.current.destroy();
          chartRef.current = new Chart(canvasRef.current, {
            type: type,
            data: data,
            options: { responsive: true, plugins: { title: { display: true, text: title } } },
          });
        }
        return () => {
          if (chartRef.current) chartRef.current.destroy();
        };
      }, [data, type, title]);

      return <canvas ref={canvasRef} />;
    };

    const Dashboard = () => {
      const barData = {
        labels: ['Jan', 'Feb', 'Mar', 'Apr'],
        datasets: [{ label: 'Sales', data: [65, 59, 80, 81], backgroundColor: '#3b82f6' }],
      };
      const lineData = {
        labels: ['Jan', 'Feb', 'Mar', 'Apr'],
        datasets: [{ label: 'Revenue', data: [28, 48, 40, 19], borderColor: '#10b981', fill: false }],
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Dashboard</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 w-full max-w-4xl mx-auto">
            <div className="bg-white p-4 rounded-lg shadow-lg">
              <ChartComponent type="bar" data={barData} title="Monthly Sales" />
            </div>
            <div className="bg-white p-4 rounded-lg shadow-lg">
              <ChartComponent type="line" data={lineData} title="Monthly Revenue" />
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Dashboard />, document.getElementById('root'));
  </script>
</body>
</html>
```


## Hard Project 39: Build a Social Media Analytics Tool in React

This project simulates a social media analytics dashboard displaying mock data for followers, engagement, and post performance using Chart.js for visualizations.

```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Social Media Analytics</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    @media (min-width: 768px) { .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    .gap-4 { gap: 1rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .p-4 { padding: 1rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .w-full { width: 100%; }
    .max-w-4xl { max-width: 56rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useEffect, useRef } = React;

    const ChartComponent = ({ type, data, title }) => {
      const canvasRef = useRef(null);
      const chartRef = useRef(null);

      useEffect(() => {
        if (canvasRef.current) {
          if (chartRef.current) chartRef.current.destroy();
          chartRef.current = new Chart(canvasRef.current, {
            type: type,
            data: data,
            options: { responsive: true, plugins: { title: { display: true, text: title } } },
          });
        }
        return () => {
          if (chartRef.current) chartRef.current.destroy();
        };
      }, [data, type, title]);

      return <canvas ref={canvasRef} />;
    };

    const SocialMediaAnalytics = () => {
      const followerData = {
        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
        datasets: [{ label: 'Followers', data: [500, 600, 750, 900], backgroundColor: '#3b82f6' }],
      };
      const engagementData = {
        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
        datasets: [{ label: 'Engagement', data: [20, 35, 50, 45], borderColor: '#10b981', fill: false }],
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Social Media Analytics</h1>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 w-full max-w-4xl mx-auto">
            <div className="bg-white p-4 rounded-lg shadow-lg">
              <ChartComponent type="bar" data={followerData} title="Follower Growth" />
            </div>
            <div className="bg-white p-4 rounded-lg shadow-lg">
              <ChartComponent type="line" data={engagementData} title="Engagement Rate" />
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<SocialMediaAnalytics />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 40: Create a Job Board with Filtering and Sorting in React

This project builds a job board with mock job listings, allowing users to filter by job type and sort by date or salary.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Job Board</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-3xl { max-width: 48rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .flex { display: flex; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const JobBoard = () => {
      const jobs = [
        { id: 1, title: 'Frontend Developer', type: 'Full-time', salary: 80000, date: '2025-06-01' },
        { id: 2, title: 'Backend Developer', type: 'Part-time', salary: 60000, date: '2025-06-10' },
        { id: 3, title: 'Designer', type: 'Full-time', salary: 70000, date: '2025-06-05' },
      ];
      const [filterType, setFilterType] = useState('All');
      const [sortBy, setSortBy] = useState('date');

      const filteredJobs = filterType === 'All'
        ? jobs
        : jobs.filter((job) => job.type === filterType);

      const sortedJobs = [...filteredJobs].sort((a, b) => {
        if (sortBy === 'salary') return b.salary - a.salary;
        return new Date(b.date) - new Date(a.date);
      });

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Job Board</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-3xl mx-auto">
            <div className="flex mb-4 space-x-2">
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="p-2 border rounded-md focus:outline-none"
              >
                <option>All</option>
                <option>Full-time</option>
                <option>Part-time</option>
              </select>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="p-2 border rounded-md focus:outline-none"
              >
                <option value="date">Sort by Date</option>
                <option value="salary">Sort by Salary</option>
              </select>
            </div>
            <div className="space-y-4">
              {sortedJobs.map((job) => (
                <div key={job.id} className="p-4 border rounded-md">
                  <h2 className="text-xl font-bold">{job.title}</h2>
                  <p className="text-gray-600">{job.type} - ${job.salary} - {job.date}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<JobBoard />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 41: Build a Real-time Stock Market App in React

This project simulates a stock market dashboard with mock stock data, updating prices every few seconds to mimic real-time updates.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Stock Market App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-3xl { max-width: 48rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .p-4 { padding: 1rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .text-gray-600 { color: #4b5563; }
    .text-green-600 { color: #059669; }
    .text-red-600 { color: #dc2626; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const StockMarketApp = () => {
      const initialStocks = [
        { id: 1, symbol: 'AAPL', price: 150, change: 0 },
        { id: 2, symbol: 'GOOG', price: 2800, change: 0 },
        { id: 3, symbol: 'MSFT', price: 300, change: 0 },
      ];
      const [stocks, setStocks] = useState(initialStocks);

      useEffect(() => {
        const interval = setInterval(() => {
          setStocks((prev) =>
            prev.map((stock) => {
              const change = (Math.random() - 0.5) * 10;
              return { ...stock, price: stock.price + change, change };
            })
          );
        }, 3000);
        return () => clearInterval(interval);
      }, []);

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Stock Market</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-3xl mx-auto">
            <div className="space-y-2">
              {stocks.map((stock) => (
                <div key={stock.id} className="p-4 border rounded-md flex justify-between">
                  <span className="text-gray-600">{stock.symbol}</span>
                  <span className="text-gray-600">${stock.price.toFixed(2)}</span>
                  <span className={stock.change >= 0 ? 'text-green-600' : 'text-red-600'}>
                    {stock.change.toFixed(2)}%
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<StockMarketApp />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 42: Create a Learning Management System in React

This project builds a basic LMS with mock courses, allowing users to enroll and track progress.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Learning Management System</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-3xl { max-width: 48rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-4 { padding: 1rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const LMS = () => {
      const courses = [
        { id: 1, title: 'React Basics', progress: 0 },
        { id: 2, title: 'JavaScript Advanced', progress: 0 },
      ];
      const [enrolled, setEnrolled] = useState([]);

      const enrollCourse = (course) => {
        if (!enrolled.find((c) => c.id === course.id)) {
          setEnrolled([...enrolled, { ...course, progress: 0 }]);
        }
      };

      const updateProgress = (id) => {
        setEnrolled(
          enrolled.map((course) =>
            course.id === id
              ? { ...course, progress: Math.min(course.progress + 10, 100) }
              : course
          )
        );
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Learning Management System</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-3xl mx-auto">
            <h2 className="text-xl font-bold mb-4">Available Courses</h2>
            <div className="space-y-4 mb-6">
              {courses.map((course) => (
                <div key={course.id} className="p-4 border rounded-md flex justify-between">
                  <span className="text-gray-600">{course.title}</span>
                  <button
                    onClick={() => enrollCourse(course)}
                    className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                    disabled={enrolled.find((c) => c.id === course.id)}
                  >
                    Enroll
                  </button>
                </div>
              ))}
            </div>
            <h2 className="text-xl font-bold mb-4">Enrolled Courses</h2>
            <div className="space-y-4">
              {enrolled.map((course) => (
                <div key={course.id} className="p-4 border rounded-md flex justify-between">
                  <span className="text-gray-600">
                    {course.title} - {course.progress}% Complete
                  </span>
                  <button
                    onClick={() => updateProgress(course.id)}
                    className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                    disabled={course.progress === 100}
                  >
                    Progress
                  </button>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<LMS />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 43: Build a Fitness Tracking App in React

This project creates a fitness tracker where users can log workouts and view progress with mock data.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fitness Tracker</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .flex { display: flex; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const FitnessTracker = () => {
      const [workouts, setWorkouts] = useState([]);
      const [type, setType] = useState('');
      const [duration, setDuration] = useState('');

      const logWorkout = () => {
        if (type.trim() && duration) {
          setWorkouts([...workouts, { id: Date.now(), type, duration: Number(duration) }]);
          setType('');
          setDuration('');
        }
      };

      const totalDuration = workouts.reduce((sum, workout) => sum + workout.duration, 0);

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">Fitness Tracker</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto">
            <div className="flex mb-4 space-x-2">
              <input
                type="text"
                value={type}
                onChange={(e) => setType(e.target.value)}
                placeholder="Workout Type"
                className="flex-grow p-2 border rounded-md focus:outline-none"
              />
              <input
                type="number"
                value={duration}
                onChange={(e) => setDuration(e.target.value)}
                placeholder="Duration (min)"
                className="w-32 p-2 border rounded-md focus:outline-none"
              />
              <button
                onClick={logWorkout}
                className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Log
              </button>
            </div>
            <p className="text-gray-600 mb-4">Total Duration: {totalDuration} minutes</p>
            <div className="space-y-2">
              {workouts.map((workout) => (
                <div key={workout.id} className="p-2 border rounded-md">
                  <span className="text-gray-600">{workout.type}: {workout.duration} minutes</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    };

    ReactDOM.render(<FitnessTracker />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 44: Create a Payment Gateway Integration in React

This project simulates a payment gateway integration with a mock checkout process, displaying a confirmation on payment.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Payment Gateway</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const PaymentGateway = () => {
      const [cardNumber, setCardNumber] = useState('');
      const [expiry, setExpiry] = useState('');
      const [cvv, setCvv] = useState('');
      const [isPaid, setIsPaid] = useState(false);

      const handlePayment = () => {
        if (cardNumber && expiry && cvv) {
          setIsPaid(true);
          console.log('Mock payment processed');
          setCardNumber('');
          setExpiry('');
          setCvv('');
        }
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Payment Gateway</h1>
          {isPaid ? (
            <div className="text-center text-gray-600">
              Payment Successful!
            </div>
          ) : (
            <div className="space-y-4">
              <input
                type="text"
                value={cardNumber}
                onChange={(e) => setCardNumber(e.target.value)}
                placeholder="Card Number"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <input
                type="text"
                value={expiry}
                onChange={(e) => setExpiry(e.target.value)}
                placeholder="MM/YY"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <input
                type="text"
                value={cvv}
                onChange={(e) => setCvv(e.target.value)}
                placeholder="CVV"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <button
                onClick={handlePayment}
                className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Pay Now
              </button>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<PaymentGateway />, document.getElementById('root'));
  </script>
</body>
</html>
```

---

## Hard Project 45: Build a Machine Learning Model Visualizer in React

This project creates a visualizer for a mock machine learning model’s predictions, using Chart.js to display results.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ML Model Visualizer</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <style>
    .bg-gray-100 { background-color: #f3f4f6; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .bg-white { background-color: #fff; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-2xl { max-width: 42rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .space-y-4 > :not(:last-child) { margin-bottom: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-md { border-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .flex { display: flex; }
    .space-x-2 > :not(:first-child) { margin-left: 0.5rem; }
    .text-gray-600 { color: #4b5563; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect, useRef } = React;

    const ChartComponent = ({ data, title }) => {
      const canvasRef = useRef(null);
      const chartRef = useRef(null);

      useEffect(() => {
        if (canvasRef.current) {
          if (chartRef.current) chartRef.current.destroy();
          chartRef.current = new Chart(canvasRef.current, {
            type: 'scatter',
            data: data,
            options: {
              responsive: true,
              plugins: { title: { display: true, text: title } },
              scales: { x: { title: { display: true, text: 'Input' } }, y: { title: { display: true, text: 'Prediction' } } },
            },
          });
        }
        return () => {
          if (chartRef.current) chartRef.current.destroy();
        };
      }, [data, title]);

      return <canvas ref={canvasRef} />;
    };

    const MLVisualizer = () => {
      const [input, setInput] = useState('');
      const [predictions, setPredictions] = useState([]);

      const predict = () => {
        if (input) {
          const x = Number(input);
          // Mock ML model: y = 2x + noise
          const y = 2 * x + (Math.random() - 0.5) * 2;
          setPredictions([...predictions, { x, y }]);
          setInput('');
        }
      };

      const chartData = {
        datasets: [
          {
            label: 'Predictions',
            data: predictions,
            backgroundColor: '#3b82f6',
          },
        ],
      };

      return (
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4 text-center">ML Model Visualizer</h1>
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl mx-auto">
            <div className="flex mb-4 space-x-2">
              <input
                type="number"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Enter input value"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
              <button
                onClick={predict}
                className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
              >
                Predict
              </button>
            </div>
            {predictions.length > 0 && (
              <ChartComponent data={chartData} title="Model Predictions" />
            )}
          </div>
        </div>
      );
    };

    ReactDOM.render(<MLVisualizer />, document.getElementById('root'));
  </script>
</body>
</html>

Perfect — the image lists **10 real-world React interview scenarios**. Let’s go one by one with **clear answers, explanations, code snippets, and syntax** you can use in interviews.

---

## **1. Infinite Scrolling (LinkedIn-style feed)**

**Approach:** Use `IntersectionObserver` or scroll events with pagination.

```jsx
import { useEffect, useRef, useState } from "react";

function Feed() {
  const [page, setPage] = useState(1);
  const [posts, setPosts] = useState([]);
  const loader = useRef(null);

  useEffect(() => {
    fetch(`/api/posts?page=${page}`)
      .then(res => res.json())
      .then(data => setPosts(prev => [...prev, ...data]));
  }, [page]);

  useEffect(() => {
    const observer = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting) setPage(p => p + 1);
    });
    if (loader.current) observer.observe(loader.current);
    return () => observer.disconnect();
  }, []);

  return (
    <div>
      {posts.map(p => <div key={p.id}>{p.text}</div>)}
      <div ref={loader}>Loading...</div>
    </div>
  );
}
```

---

## **2. Auto-logout After Inactivity**

**Approach:** Track user activity with `setTimeout`.

```jsx
import { useEffect } from "react";

function useAutoLogout(logout, timeout = 30 * 60 * 1000) {
  useEffect(() => {
    let timer;
    const reset = () => {
      clearTimeout(timer);
      timer = setTimeout(logout, timeout);
    };
    window.addEventListener("mousemove", reset);
    window.addEventListener("keydown", reset);
    reset();
    return () => {
      clearTimeout(timer);
      window.removeEventListener("mousemove", reset);
      window.removeEventListener("keydown", reset);
    };
  }, [logout, timeout]);
}
```

---

## **3. Internationalization (i18n)**

**Approach:** Use `react-i18next`.

```bash
npm install react-i18next i18next
```

```jsx
import { useTranslation } from "react-i18next";

function App() {
  const { t, i18n } = useTranslation();
  return (
    <div>
      <button onClick={() => i18n.changeLanguage("fr")}>FR</button>
      <button onClick={() => i18n.changeLanguage("en")}>EN</button>
      <p>{t("welcome_message")}</p>
    </div>
  );
}
```

`locales/en.json`

```json
{ "welcome_message": "Hello!" }
```

---

## **4. Large File Uploads**

**Approach:** Use **chunked uploads** and progress tracking.

```jsx
async function uploadFile(file) {
  const chunkSize = 5 * 1024 * 1024; // 5MB
  for (let start = 0; start < file.size; start += chunkSize) {
    const chunk = file.slice(start, start + chunkSize);
    const formData = new FormData();
    formData.append("file", chunk);
    await fetch("/api/upload", { method: "POST", body: formData });
  }
}
```

---

## **5. SEO for React SPA**

**Problem:** Google not indexing SPA.
**Solution:** Use **Server-Side Rendering (Next.js)** or **React Helmet** for meta tags.

```jsx
import { Helmet } from "react-helmet";

function SEOPage() {
  return (
    <>
      <Helmet>
        <title>My Page</title>
        <meta name="description" content="SEO description here" />
      </Helmet>
      <h1>Content</h1>
    </>
  );
}
```

---

## **6. Stale Closures in useEffect**

**Problem:** Callback in useEffect using old state.
**Solution:** Use function updater or refs.

```jsx
const [count, setCount] = useState(0);

useEffect(() => {
  const id = setInterval(() => {
    setCount(c => c + 1); // ✅ function updater fixes stale closure
  }, 1000);
  return () => clearInterval(id);
}, []);
```

---

## **7. Bundle Too Large**

**Approach:** Code splitting + lazy loading.

```jsx
import React, { Suspense, lazy } from "react";
const Profile = lazy(() => import("./Profile"));

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Profile />
    </Suspense>
  );
}
```

* Use `webpack-bundle-analyzer` to check sizes.
* Use `tree-shaking`, remove unused libs.

---

## **8. Role-Based Routes**

**Approach:** Wrap `Route` with auth check.

```jsx
import { Navigate } from "react-router-dom";

function PrivateRoute({ children, role, allowed }) {
  if (!allowed.includes(role)) return <Navigate to="/unauthorized" />;
  return children;
}
```

```jsx
<Route path="/admin" element={
  <PrivateRoute role={user.role} allowed={["admin"]}>
    <AdminPage />
  </PrivateRoute>
} />
```

---

## **9. Smooth Page Transitions**

**Approach:** Use **Framer Motion**.

```bash
npm install framer-motion
```

```jsx
import { motion } from "framer-motion";

function Page() {
  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <h1>Welcome</h1>
    </motion.div>
  );
}
```

---

## **10. API Rate Limit / Throttling**

**Approach:** Use `lodash.throttle` or custom logic.

```bash
npm install lodash
```

```jsx
import { throttle } from "lodash";

const fetchData = throttle(() => {
  fetch("/api/data").then(r => r.json()).then(console.log);
}, 2000); // 1 call per 2s
```

---

✅ With these **answers + code**, you can confidently explain solutions in interviews.

Do you want me to also create a **full GitHub repo with these 10 scenarios coded in React** (so you can practice running them)?

Of course\! Converting that JSON structure into JSX can be done by creating a recursive function or a React component that walks through the JSON tree and renders the corresponding elements.

Here is the direct conversion of your JSON object to a static JSX structure, followed by a dynamic solution using a React component.

### 1\. Static JSX Representation

Based on the JSON data you provided, the direct equivalent in JSX would look like this. Note that the `style` attribute in JSX takes an object, not a string.

```jsx
<div width="100">
  <span style={{ color: 'red' }}>
    {/* Assuming children of span are here */}
  </span>
  <input value="" id="input1" />
  <div style={{ background: 'red' }}>
    {/* Assuming children of the inner div are here */}
  </div>
</div>
```

**Note:** There is a small discrepancy between your two images. The JSON input (first image) has a `<div>` with a red background as the third child, while your example output (second image) shows a `<span>`. The code above faithfully follows your JSON input.

-----

### 2\. Dynamic Rendering with a React Component

For a more powerful and flexible solution, you can create a recursive React component that takes your JSON as a prop and renders it dynamically.

Here is the complete code to achieve that:

#### Step 1: Define your JSON data

```javascript
const jsonData = {
  element: "div",
  attributes: { "width": "100" },
  children: [
    {
      element: "span",
      attributes: { "style": "color: 'red'" },
      children: [], // Assuming no children for simplicity
    },
    {
      element: "input",
      attributes: { "value": "", "id": "input1" },
      children: [],
    },
    {
      element: "div",
      attributes: { "style": "background: 'red'" },
      children: [], // Assuming no children for simplicity
    },
  ],
};
```

#### Step 2: Create the Recursive Component

This component will parse the JSON node and render itself and its children.

```jsx
import React from 'react';

/**
 * A helper function to parse CSS style strings into a style object
 * that React can use.
 * E.g., "color: 'red'; font-size: 16px" becomes { color: 'red', fontSize: '16px' }
 */
const parseStyleString = (styleStr) => {
  if (!styleStr || typeof styleStr !== 'string') {
    return {};
  }
  const styleObj = {};
  styleStr.split(';').forEach(declaration => {
    const [property, value] = declaration.split(':');
    if (property && value) {
      // Convert kebab-case (e.g., background-color) to camelCase (e.g., backgroundColor)
      const camelCaseProperty = property.trim().replace(/-(\w)/g, (match, letter) => letter.toUpperCase());
      // Clean up the value by removing extra quotes and whitespace
      styleObj[camelCaseProperty] = value.trim().replace(/['"]/g, '');
    }
  });
  return styleObj;
};


/**
 * A recursive component to render JSX from a JSON structure.
 */
const JsonToJsx = ({ node }) => {
  // If the node is invalid, render nothing.
  if (!node || !node.element) {
    return null;
  }

  // Destructure the properties from the JSON node.
  const { element: Tag, attributes = {}, children = [] } = node;

  // Process attributes, paying special attention to the 'style' attribute.
  const props = { ...attributes };
  if (props.style) {
    props.style = parseStyleString(props.style);
  }

  return (
    <Tag {...props}>
      {children.length > 0 &&
        children.map((childNode, index) => (
          // Use the index as a key and recursively call the component for each child.
          <JsonToJsx key={index} node={childNode} />
        ))}
    </Tag>
  );
};

// Example of how to use the component
const App = () => {
  return (
    <div>
      <h1>Rendered from JSON:</h1>
      <JsonToJsx node={jsonData} />
    </div>
  );
};

export default App;
```

### How It Works

1.  **`JsonToJsx` Component**: This is the core component that takes a `node` (a part of your JSON tree) as a prop.
2.  **Destructuring**: It extracts the `element` (the tag name), `attributes` (props), and `children` from the node.
3.  **`Tag` Variable**: The `element` string (e.g., 'div') is assigned to a capitalized variable `Tag`. In JSX, components must start with a capital letter to be rendered correctly.
4.  **Style Parsing**: The `parseStyleString` helper function converts the CSS string from your JSON (`"color: 'red'"`) into a JavaScript object (`{ color: 'red' }`) that React's `style` prop requires.
5.  **Recursion**: The component maps over the `children` array. For each child object in the array, it renders another `<JsonToJsx />` component, passing that child object as its `node`. This process continues until all nested elements are rendered.
6.  **`key` Prop**: When rendering a list of elements in React, you must provide a unique `key` prop for each item. Here, we simply use the array `index` as the key.



COMPLEX LEVEL CODE


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>React Advanced Patterns Showcase</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    // Configuration for Tailwind CSS JIT compiler to recognize dynamic classes
    tailwind.config = {
      safelist: [
        { pattern: /bg-(gray|slate)-(100|200|300|400|500|600|700|800|900)/ },
        { pattern: /text-(gray|slate)-(100|200|300|400|500|600|700|800|900)/ },
        { pattern: /border-(gray|slate)-(200|300|400|500|600|700|800)/ },
        'transform', 'translate-y-0', 'opacity-100',
      ],
      theme: {
        extend: {
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
        },
      },
    }
  </script>
  <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
  <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <!-- Firebase Services -->
  <script type="module">
    // IMPORTANT: Replace with your actual Firebase configuration
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_AUTH_DOMAIN",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_STORAGE_BUCKET",
      messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
      appId: "YOUR_APP_ID"
    };
    window.firebaseConfig = firebaseConfig;
  </script>
  <style>
    body { font-family: 'Inter', sans-serif; }
    .dark .dark\:bg-slate-900 { background-color: #0f172a; }
    .dark .dark\:bg-slate-800 { background-color: #1e293b; }
    .dark .dark\:bg-slate-700 { background-color: #334155; }
    .dark .dark\:text-slate-200 { color: #e2e8f0; }
    .dark .dark\:text-slate-400 { color: #94a3b8; }
    .dark .dark\:border-slate-700 { border-color: #334155; }
    .dark .dark\:hover\:bg-slate-600:hover { background-color: #475569; }
    .loader {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div id="root"></div>
  <div id="modal-root"></div> <!-- Portal target for modals -->

  <script type="text/babel" data-type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
    import { 
      getFirestore, collection, doc, onSnapshot, addDoc, deleteDoc, updateDoc, 
      query, orderBy, limit, startAfter, getDocs, setDoc, getDoc, where 
    } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
    import { 
      getAuth, onAuthStateChanged, createUserWithEmailAndPassword, 
      signInWithEmailAndPassword, signOut 
    } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

    const { 
      useState, useEffect, useCallback, useMemo, useReducer, createContext, useContext, useRef 
    } = React;

    // --- Firebase Initialization ---
    let app, db, auth;
    try {
      app = initializeApp(window.firebaseConfig);
      db = getFirestore(app);
      auth = getAuth(app);
    } catch (e) {
      console.error("Firebase initialization failed. Please provide your config.", e);
    }
    
    // --- Centralized App State Management ---

    // 1. THEME CONTEXT (Project 10)
    const ThemeContext = createContext();

    const ThemeProvider = ({ children }) => {
      const [theme, setTheme] = useState('light');
      const user = useAuth().currentUser;

      // Load theme from Firestore on user login
      useEffect(() => {
        if (user) {
          const userThemeRef = doc(db, "userPreferences", user.uid);
          const unsub = onSnapshot(userThemeRef, (doc) => {
            if (doc.exists() && doc.data().theme) {
              setTheme(doc.data().theme);
            }
          });
          return () => unsub();
        } else {
          // Fallback to local storage or default if no user
          const localTheme = localStorage.getItem('theme') || 'light';
          setTheme(localTheme);
        }
      }, [user]);
      
      useEffect(() => {
        const root = window.document.documentElement;
        root.classList.remove(theme === 'light' ? 'dark' : 'light');
        root.classList.add(theme);
        if(!user) localStorage.setItem('theme', theme);
      }, [theme, user]);

      const toggleTheme = useCallback(async () => {
        const newTheme = theme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
        if (user) {
          const userThemeRef = doc(db, "userPreferences", user.uid);
          await setDoc(userThemeRef, { theme: newTheme }, { merge: true });
        }
      }, [theme, user]);

      return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
          {children}
        </ThemeContext.Provider>
      );
    };

    const useTheme = () => useContext(ThemeContext);

    // 2. AUTHENTICATION CONTEXT (Project 8)
    const AuthContext = createContext(null);

    const AuthProvider = ({ children }) => {
        const [currentUser, setCurrentUser] = useState(null);
        const [loading, setLoading] = useState(true);

        useEffect(() => {
            const unsubscribe = onAuthStateChanged(auth, user => {
                setCurrentUser(user);
                setLoading(false);
            });
            return unsubscribe;
        }, []);

        const value = { currentUser, loading };

        return (
            <AuthContext.Provider value={value}>
                {!loading && children}
            </AuthContext.Provider>
        );
    };

    const useAuth = () => useContext(AuthContext);

    // --- Reusable Hooks ---

    // Debounce Hook (Project 5)
    const useDebounce = (value, delay) => {
      const [debouncedValue, setDebouncedValue] = useState(value);
      useEffect(() => {
        const handler = setTimeout(() => {
          setDebouncedValue(value);
        }, delay);
        return () => clearTimeout(handler);
      }, [value, delay]);
      return debouncedValue;
    };

    // Outside Click Hook (for Dropdown)
    const useOutsideClick = (ref, callback) => {
        useEffect(() => {
            const handleClickOutside = (event) => {
                if (ref.current && !ref.current.contains(event.target)) {
                    callback();
                }
            };
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
                document.removeEventListener("mousedown", handleClickOutside);
            };
        }, [ref, callback]);
    };

    // --- High-Performance Components ---

    // Loader Component
    const Loader = () => <div className="loader"></div>;

    // Memoized Todo Item with Virtualization (Project 1)
    const TodoItem = React.memo(({ todo, onToggle, onDelete, style }) => (
      <li 
        className="flex justify-between items-center p-3 border-b border-gray-200 dark:border-slate-700"
        style={style} // Style from virtualizer
      >
        <span
          onClick={() => onToggle(todo.id, !todo.completed)}
          className={`cursor-pointer text-lg ${todo.completed ? 'line-through text-gray-500 dark:text-slate-400' : 'dark:text-slate-200'}`}
        >
          {todo.text}
        </span>
        <button
          onClick={() => onDelete(todo.id)}
          className="text-red-500 hover:text-red-700 font-semibold transition-colors"
        >
          Delete
        </button>
      </li>
    ));

    // --- Main Project Components ---

    // 1. SCALABLE TODO APP
    const TodoApp = () => {
      const [todos, setTodos] = useState([]);
      const [inputText, setInputText] = useState('');
      const [loading, setLoading] = useState(true);
      const user = useAuth().currentUser;
      const listRef = useRef();

      // Real-time data fetching from Firestore
      useEffect(() => {
        if (!user) {
          setTodos([]);
          setLoading(false);
          return;
        }
        setLoading(true);
        const q = query(collection(db, `users/${user.uid}/todos`), orderBy("createdAt", "desc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
          const todosData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
          setTodos(todosData);
          setLoading(false);
        });
        return () => unsubscribe();
      }, [user]);

      const handleAddTodo = useCallback(async (e) => {
        e.preventDefault();
        if (inputText.trim() && user) {
          const newTodo = {
            text: inputText.trim(),
            completed: false,
            createdAt: new Date()
          };
          await addDoc(collection(db, `users/${user.uid}/todos`), newTodo);
          setInputText('');
        }
      }, [inputText, user]);

      const handleToggleTodo = useCallback(async (id, completed) => {
        if(user) await updateDoc(doc(db, `users/${user.uid}/todos`, id), { completed });
      }, [user]);

      const handleDeleteTodo = useCallback(async (id) => {
        if(user) await deleteDoc(doc(db, `users/${user.uid}/todos`, id));
      }, [user]);

      // VIRTUALIZATION LOGIC
      const rowHeight = 60; // Estimated height of each todo item in px
      const [scrollTop, setScrollTop] = useState(0);
      const containerHeight = 500; // Fixed height for the scrollable container

      const startIndex = Math.floor(scrollTop / rowHeight);
      const endIndex = Math.min(
        startIndex + Math.ceil(containerHeight / rowHeight) + 2, // render a few extra
        todos.length
      );

      const virtualItems = useMemo(() => {
        return todos.slice(startIndex, endIndex).map((todo, index) => ({
          ...todo,
          style: {
            position: 'absolute',
            top: `${(startIndex + index) * rowHeight}px`,
            left: 0,
            right: 0,
            height: `${rowHeight}px`,
          }
        }));
      }, [startIndex, endIndex, todos]);


      if (!user) {
        return <p className="text-center text-gray-500 dark:text-slate-400">Please log in to manage your todos.</p>
      }

      return (
        <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-xl w-full max-w-2xl mx-auto">
          <h1 className="text-3xl font-bold mb-6 text-center text-gray-800 dark:text-slate-200">Scalable Todo App</h1>
          <form onSubmit={handleAddTodo} className="flex mb-4">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="Add a new todo (backed by Firestore)"
              className="flex-grow p-3 border-2 border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white"
            />
            <button type="submit" className="bg-blue-600 text-white p-3 rounded-r-md hover:bg-blue-700 font-semibold transition-colors">Add</button>
          </form>
          <div 
            ref={listRef}
            onScroll={(e) => setScrollTop(e.target.scrollTop)}
            className="h-[500px] overflow-y-auto relative bg-gray-50 dark:bg-slate-900 rounded"
          >
             {loading ? <Loader /> : (
              <ul style={{ height: `${todos.length * rowHeight}px` }} className="relative">
                {virtualItems.map(todo => (
                  <TodoItem
                    key={todo.id}
                    todo={todo}
                    onToggle={handleToggleTodo}
                    onDelete={handleDeleteTodo}
                    style={todo.style}
                  />
                ))}
              </ul>
            )}
          </div>
          <p className="text-center text-sm mt-4 text-gray-400">Showing {virtualItems.length} of {todos.length} items with virtualization.</p>
        </div>
      );
    };

    // 2. REAL-TIME COUNTER APP
    const CounterApp = () => {
        const [count, setCount] = useState(0);
        const [loading, setLoading] = useState(true);
        const counterRef = doc(db, "globalState", "counter");

        useEffect(() => {
            const unsubscribe = onSnapshot(counterRef, (doc) => {
                if(doc.exists()) {
                    setCount(doc.data().value);
                } else {
                    // Initialize if doesn't exist
                    setDoc(counterRef, { value: 0 });
                }
                setLoading(false);
            });
            return () => unsubscribe();
        }, []);

        const updateCounter = useCallback(async (newValue) => {
            await setDoc(counterRef, { value: newValue });
        }, []);

        return (
            <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-md text-center">
                <h1 className="text-3xl font-bold mb-4 dark:text-slate-200">Real-Time Global Counter</h1>
                <p className="text-gray-600 dark:text-slate-400 mb-6">This counter is synced in real-time for all users.</p>
                {loading ? <Loader/> : <p className="text-7xl font-bold mb-6 text-blue-600 dark:text-blue-400">{count}</p>}
                <div className="flex justify-center space-x-4">
                    <button onClick={() => updateCounter(count + 1)} className="bg-green-500 text-white px-6 py-3 rounded-md hover:bg-green-600 font-semibold transition-transform transform hover:scale-105">Increment</button>
                    <button onClick={() => updateCounter(count - 1)} className="bg-red-500 text-white px-6 py-3 rounded-md hover:bg-red-600 font-semibold transition-transform transform hover:scale-105">Decrement</button>
                    <button onClick={() => updateCounter(0)} className="bg-gray-500 text-white px-6 py-3 rounded-md hover:bg-gray-600 font-semibold transition-transform transform hover:scale-105">Reset</button>
                </div>
            </div>
        );
    };

    // 3. COMPLEX FORM HANDLING
    const FormHandlingApp = () => {
        const formReducer = (state, action) => {
            switch(action.type) {
                case 'SET_FIELD':
                    return { ...state, values: { ...state.values, [action.field]: action.value }};
                case 'SET_ERRORS':
                    return { ...state, errors: action.errors };
                case 'SET_SUBMITTING':
                    return { ...state, isSubmitting: action.isSubmitting };
                case 'RESET':
                    return { values: { name: '', email: '', username: ''}, errors: {}, isSubmitting: false };
                default:
                    return state;
            }
        };

        const [state, dispatch] = useReducer(formReducer, {
            values: { name: '', email: '', username: '' },
            errors: {},
            isSubmitting: false,
        });

        const debouncedUsername = useDebounce(state.values.username, 500);

        // Async validation for username
        useEffect(() => {
            const checkUsername = async () => {
                if (debouncedUsername.length < 3) return;
                const q = query(collection(db, "users"), where("username", "==", debouncedUsername));
                const snapshot = await getDocs(q);
                let newErrors = {...state.errors};
                if (!snapshot.empty) {
                    newErrors.username = "Username is already taken.";
                } else {
                    delete newErrors.username;
                }
                dispatch({ type: 'SET_ERRORS', errors: newErrors });
            };
            checkUsername();
        }, [debouncedUsername]);

        const handleInputChange = (e) => {
            dispatch({ type: 'SET_FIELD', field: e.target.name, value: e.target.value });
        };
        
        const handleSubmit = async (e) => {
            e.preventDefault();
            dispatch({ type: 'SET_SUBMITTING', isSubmitting: true });
            // Final validation
            if (state.errors.username) {
                dispatch({ type: 'SET_SUBMITTING', isSubmitting: false });
                return;
            }
            console.log('Form Data:', state.values);
            // Simulate API call
            await new Promise(res => setTimeout(res, 1000));
            alert(`Submitted: Name=${state.values.name}, Email=${state.values.email}`);
            dispatch({ type: 'RESET' });
        };

        return (
            <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-md">
                <h1 className="text-3xl font-bold mb-4 text-center dark:text-slate-200">Complex Form</h1>
                <form onSubmit={handleSubmit} className="space-y-6">
                    <div>
                        <label className="block text-sm font-medium mb-1 dark:text-slate-300">Name</label>
                        <input type="text" name="name" value={state.values.name} onChange={handleInputChange} placeholder="Enter your name" className="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium mb-1 dark:text-slate-300">Email</label>
                        <input type="email" name="email" value={state.values.email} onChange={handleInputChange} placeholder="Enter your email" className="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium mb-1 dark:text-slate-300">Username</label>
                        <input type="text" name="username" value={state.values.username} onChange={handleInputChange} placeholder="At least 3 characters" className={`w-full p-3 border rounded-md focus:outline-none focus:ring-2 ${state.errors.username ? 'border-red-500 ring-red-500' : 'focus:ring-blue-500 dark:border-slate-600'} dark:bg-slate-700 dark:text-white`}/>
                        {state.errors.username && <p className="text-red-500 text-sm mt-1">{state.errors.username}</p>}
                    </div>
                    <button type="submit" disabled={state.isSubmitting} className="w-full bg-blue-600 text-white p-3 rounded-md hover:bg-blue-700 font-semibold disabled:bg-gray-400 transition-colors">
                        {state.isSubmitting ? 'Submitting...' : 'Submit'}
                    </button>
                </form>
            </div>
        );
    };
    
    // 4. ACCESSIBLE MODAL COMPONENT
    const Modal = ({ isOpen, onClose, title, children }) => {
      const modalRef = useRef();

      // Handle Escape key to close
      useEffect(() => {
        const handleKeyDown = (event) => {
          if (event.key === 'Escape') {
            onClose();
          }
        };
        if (isOpen) {
          window.addEventListener('keydown', handleKeyDown);
          // Focus trapping could be added here for full accessibility
        }
        return () => {
          window.removeEventListener('keydown', handleKeyDown);
        };
      }, [isOpen, onClose]);

      if (!isOpen) return null;

      // Using a portal to render modal at the root level
      return ReactDOM.createPortal(
        <div 
          className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 transition-opacity duration-300"
          onClick={onClose} // Close on overlay click
        >
          <div 
            ref={modalRef}
            className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-md transform transition-all duration-300 scale-95 opacity-0 animate-fade-in-up"
            onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside modal
            role="dialog"
            aria-modal="true"
            aria-labelledby="modal-title"
          >
            <h2 id="modal-title" className="text-2xl font-bold mb-4 dark:text-slate-200">{title}</h2>
            <div className="dark:text-slate-300">{children}</div>
            <button
              onClick={onClose}
              className="mt-6 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 font-semibold"
              aria-label="Close modal"
            >
              Close
            </button>
          </div>
          <style>{`
            @keyframes fade-in-up {
              0% { transform: scale(0.95) translateY(10px); opacity: 0; }
              100% { transform: scale(1) translateY(0); opacity: 1; }
            }
            .animate-fade-in-up { animation: fade-in-up 0.3s forwards; }
          `}</style>
        </div>,
        document.getElementById('modal-root')
      );
    };

    const ModalApp = () => {
      const [isModalOpen, setIsModalOpen] = useState(false);
      return (
        <div className="text-center">
          <button onClick={() => setIsModalOpen(true)} className="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 font-semibold">Open Accessible Modal</button>
          <Modal
            isOpen={isModalOpen}
            onClose={() => setIsModalOpen(false)}
            title="Accessible Portal Modal"
          >
            This modal is rendered into a React Portal. It can be closed by clicking the overlay, the "Close" button, or pressing the 'Escape' key.
          </Modal>
        </div>
      );
    };

    // 5. SEARCH WITH DEBOUNCING & VIRTUALIZATION
    const SearchApp = () => {
        const [searchTerm, setSearchTerm] = useState('');
        const [results, setResults] = useState([]);
        const [loading, setLoading] = useState(false);
        const debouncedSearchTerm = useDebounce(searchTerm, 500);

        // This would typically search a large dataset in Firestore.
        // For this demo, we'll simulate it with a large local array.
        const allItems = useMemo(() => Array.from({ length: 10000 }, (_, i) => `Item ${i + 1} with some text`), []);
        
        useEffect(() => {
            if (debouncedSearchTerm) {
                setLoading(true);
                // Simulate network latency & filtering
                setTimeout(() => {
                    const filtered = allItems.filter(item =>
                        item.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
                    );
                    setResults(filtered);
                    setLoading(false);
                }, 300);
            } else {
                setResults([]);
            }
        }, [debouncedSearchTerm, allItems]);

        // Virtualization logic for search results
        const rowHeight = 40;
        const [scrollTop, setScrollTop] = useState(0);
        const containerHeight = 400;

        const startIndex = Math.floor(scrollTop / rowHeight);
        const endIndex = Math.min(startIndex + Math.ceil(containerHeight / rowHeight) + 2, results.length);
        
        const virtualResults = useMemo(() => {
            return results.slice(startIndex, endIndex).map((item, index) => ({
              item,
              style: {
                position: 'absolute',
                top: `${(startIndex + index) * rowHeight}px`,
                left: 0, right: 0, height: `${rowHeight}px`,
                padding: '8px',
                borderBottom: '1px solid #eee'
              }
            }));
        }, [startIndex, endIndex, results]);

        return (
            <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-2xl">
                <h1 className="text-3xl font-bold mb-4 text-center dark:text-slate-200">Debounced Search</h1>
                <input
                    type="text"
                    value={searchTerm}
                    onChange={e => setSearchTerm(e.target.value)}
                    placeholder="Search through 10,000 items..."
                    className="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white"
                />
                <div 
                  className="h-[400px] overflow-y-auto mt-4 relative bg-gray-50 dark:bg-slate-900 rounded"
                  onScroll={e => setScrollTop(e.target.scrollTop)}
                >
                    {loading ? <Loader/> : (
                      <ul style={{ height: `${results.length * rowHeight}px`}} className="relative dark:text-slate-300">
                          {virtualResults.map(({item, style}, index) => <li key={index} style={style}>{item}</li>)}
                      </ul>
                    )}
                </div>
                <p className="text-center text-sm mt-4 text-gray-400">
                  {results.length > 0 && `Showing ${virtualResults.length} of ${results.length} results.`}
                  {!loading && searchTerm && results.length === 0 && 'No results found.'}
                </p>
            </div>
        );
    };

    // 6. SPA ROUTER (STATE-BASED)
    // Components for pages
    const HomePage = () => <div className="text-center"><h2 className="text-3xl font-bold dark:text-slate-200">Home Page</h2><p className="dark:text-slate-400">Welcome to the showcase!</p></div>;
    const AboutPage = () => <div className="text-center"><h2 className="text-3xl font-bold dark:text-slate-200">About Page</h2><p className="dark:text-slate-400">Learn more about these advanced patterns.</p></div>;
    const ProfilePage = ({user}) => <div className="text-center"><h2 className="text-3xl font-bold dark:text-slate-200">Profile</h2><p className="dark:text-slate-400">Welcome, {user.email}!</p></div>;
    const NotFoundPage = () => <div className="text-center"><h2 className="text-3xl font-bold text-red-500">404 - Not Found</h2><p className="dark:text-slate-400">The page you requested does not exist.</p></div>;

    const RouterApp = () => {
        const [route, setRoute] = useState('/');
        const user = useAuth().currentUser;

        // "Protected Route" logic
        useEffect(() => {
            if (route === '/profile' && !user) {
                setRoute('/login'); // Redirect to login if not authenticated
            }
        }, [route, user]);
        
        const renderContent = () => {
            switch(route) {
                case '/': return <HomePage />;
                case '/about': return <AboutPage />;
                case '/profile': return user ? <ProfilePage user={user} /> : null;
                // We show the login page from the main App component, so a specific route isn't needed here
                default: return <NotFoundPage />;
            }
        };

        const NavLink = ({ to, children }) => (
          <button onClick={() => setRoute(to)} className={`font-semibold transition-colors ${route === to ? 'text-blue-500' : 'text-gray-600 hover:text-blue-500 dark:text-slate-300 dark:hover:text-blue-400'}`}>
            {children}
          </button>
        );

        return (
            <div className="w-full max-w-4xl bg-white dark:bg-slate-800 shadow-xl rounded-lg p-6">
                <nav className="flex justify-center space-x-6 border-b pb-4 mb-6 dark:border-slate-700">
                    <NavLink to="/">Home</NavLink>
                    <NavLink to="/about">About</NavLink>
                    {user && <NavLink to="/profile">Profile</NavLink>}
                </nav>
                <div className="p-4">{renderContent()}</div>
            </div>
        );
    };

    // 7. FIRESTORE PAGINATION
    const PaginationApp = () => {
        const [items, setItems] = useState([]);
        const [lastVisible, setLastVisible] = useState(null);
        const [firstVisible, setFirstVisible] = useState(null);
        const [loading, setLoading] = useState(false);
        const [page, setPage] = useState(1);
        
        const itemsPerPage = 5;

        const fetchItems = useCallback(async (direction = 'next') => {
            setLoading(true);
            try {
                let q;
                if (direction === 'next' && lastVisible) {
                    q = query(collection(db, "paginatedItems"), orderBy("value"), startAfter(lastVisible), limit(itemsPerPage));
                } else if (direction === 'prev' && firstVisible) {
                    // Firestore doesn't support `endBefore` with `onSnapshot` easily, so getDocs is better here.
                    // This is a simplified example. Real prev would use endBefore.
                    q = query(collection(db, "paginatedItems"), orderBy("value"), limit(itemsPerPage));
                } else {
                    q = query(collection(db, "paginatedItems"), orderBy("value"), limit(itemsPerPage));
                }

                const documentSnapshots = await getDocs(q);
                const newItems = documentSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));

                setItems(newItems);
                setLastVisible(documentSnapshots.docs[documentSnapshots.docs.length - 1]);
                setFirstVisible(documentSnapshots.docs[0]);
            } catch (error) {
                console.error("Error fetching items:", error);
            }
            setLoading(false);
        }, [lastVisible, firstVisible]);

        useEffect(() => { fetchItems(); }, []); // Initial fetch

        const nextPage = () => {
          setPage(p => p + 1);
          fetchItems('next');
        };

        const prevPage = () => {
          // Simplified for demo, a real implementation is more complex
          setPage(p => Math.max(1, p - 1));
          fetchItems('prev');
        };

        return (
          <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-2xl">
            <h1 className="text-3xl font-bold mb-4 text-center dark:text-slate-200">Server-Side Pagination</h1>
            <div className="min-h-[260px]">
              {loading ? <Loader/> : (
                <ul className="space-y-2">
                  {items.map(item => <li key={item.id} className="p-3 border rounded-md dark:border-slate-700 dark:text-slate-300">Item #{item.value}</li>)}
                </ul>
              )}
            </div>
            <div className="mt-6 flex justify-between items-center">
              <button onClick={prevPage} disabled={page <= 1} className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 disabled:bg-gray-300">Previous</button>
              <span className="font-semibold dark:text-slate-300">Page {page}</span>
              <button onClick={nextPage} className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">Next</button>
            </div>
            <p className="text-xs text-center mt-2 text-gray-500">Note: For this demo to work, add a 'paginatedItems' collection in Firestore with documents having a numeric 'value' field.</p>
          </div>
        );
    };

    // 8. LOGIN FORM WITH FIREBASE AUTH
    const LoginForm = () => {
        const [isLogin, setIsLogin] = useState(true);
        const [formData, setFormData] = useState({ email: '', password: '' });
        const [error, setError] = useState('');
        const [loading, setLoading] = useState(false);
        const { currentUser } = useAuth();
        
        const handleInputChange = e => setFormData({...formData, [e.target.name]: e.target.value});

        const handleSubmit = async e => {
            e.preventDefault();
            setLoading(true);
            setError('');
            try {
                if(isLogin) {
                    await signInWithEmailAndPassword(auth, formData.email, formData.password);
                } else {
                    await createUserWithEmailAndPassword(auth, formData.email, formData.password);
                }
            } catch (err) {
                setError(err.message);
            }
            setLoading(false);
        };
        
        if (currentUser) {
            return (
                <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-md text-center">
                    <h1 className="text-2xl font-bold mb-4 dark:text-slate-200">Welcome!</h1>
                    <p className="mb-6 dark:text-slate-300">You are logged in as {currentUser.email}</p>
                    <button onClick={() => signOut(auth)} className="w-full bg-red-500 text-white p-3 rounded-md hover:bg-red-600 font-semibold">Sign Out</button>
                </div>
            );
        }

        return (
            <div className="bg-white dark:bg-slate-800 p-8 rounded-lg shadow-xl w-full max-w-md">
                <h1 className="text-3xl font-bold mb-4 text-center dark:text-slate-200">{isLogin ? 'Login' : 'Sign Up'}</h1>
                <form onSubmit={handleSubmit} className="space-y-6">
                    <div>
                        <label className="block text-sm font-medium mb-1 dark:text-slate-300">Email</label>
                        <input type="email" name="email" onChange={handleInputChange} required className="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium mb-1 dark:text-slate-300">Password</label>
                        <input type="password" name="password" onChange={handleInputChange} required className="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white"/>
                    </div>
                    {error && <p className="text-red-500 text-sm">{error}</p>}
                    <button type="submit" disabled={loading} className="w-full bg-blue-600 text-white p-3 rounded-md hover:bg-blue-700 font-semibold disabled:bg-gray-400">
                        {loading ? 'Processing...' : (isLogin ? 'Login' : 'Create Account')}
                    </button>
                </form>
                <button onClick={() => setIsLogin(!isLogin)} className="w-full text-center mt-4 text-sm text-blue-600 hover:underline dark:text-blue-400">
                    {isLogin ? 'Need an account? Sign Up' : 'Have an account? Login'}
                </button>
            </div>
        );
    };

    // 9. ACCESSIBLE DROPDOWN MENU
    const Dropdown = ({ options }) => {
        const [isOpen, setIsOpen] = useState(false);
        const [selectedIndex, setSelectedIndex] = useState(0);
        const dropdownRef = useRef(null);
        useOutsideClick(dropdownRef, () => setIsOpen(false));

        const handleKeyDown = (e) => {
            if (e.key === 'Escape') setIsOpen(false);
            if (e.key === 'ArrowDown') {
                setSelectedIndex(prev => (prev + 1) % options.length);
            }
            if (e.key === 'ArrowUp') {
                setSelectedIndex(prev => (prev - 1 + options.length) % options.length);
            }
            if (e.key === 'Enter') {
                console.log('Selected:', options[selectedIndex]);
                setIsOpen(false);
            }
        };

        return (
            <div className="relative" ref={dropdownRef} onKeyDown={handleKeyDown}>
                <button
                    onClick={() => setIsOpen(!isOpen)}
                    className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 w-48 text-left flex justify-between items-center"
                    aria-haspopup="listbox"
                    aria-expanded={isOpen}
                >
                    {options[selectedIndex]}
                    <span className="transform transition-transform">{isOpen ? '▲' : '▼'}</span>
                </button>
                {isOpen && (
                    <ul className="absolute top-full mt-2 left-0 bg-white dark:bg-slate-700 shadow-lg rounded-md w-48 z-10" role="listbox">
                        {options.map((option, index) => (
                            <li
                                key={option}
                                onClick={() => {
                                    setSelectedIndex(index);
                                    setIsOpen(false);
                                    console.log('Selected:', option);
                                }}
                                className={`p-2 text-gray-700 dark:text-slate-200 hover:bg-gray-100 dark:hover:bg-slate-600 cursor-pointer ${selectedIndex === index ? 'bg-blue-100 dark:bg-blue-900' : ''}`}
                                role="option"
                                aria-selected={selectedIndex === index}
                            >
                                {option}
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        );
    };

    const DropdownApp = () => (
      <div className="flex flex-col items-center space-y-4">
        <h1 className="text-2xl font-bold dark:text-slate-200 mb-4">Accessible Dropdown</h1>
        <p className="dark:text-slate-400">Try using Arrow Keys, Enter, and Escape.</p>
        <Dropdown options={['Option A', 'Option B', 'Option C']} />
      </div>
    );
    
    // --- Main App Component ---
    const App = () => {
      const { theme, toggleTheme } = useTheme();
      const [activeProject, setActiveProject] = useState(null);

      const projects = {
        'Todo App': <TodoApp />,
        'Counter': <CounterApp />,
        'Form': <FormHandlingApp />,
        'Modal': <ModalApp />,
        'Search': <SearchApp />,
        'Router': <RouterApp />,
        'Pagination': <PaginationApp />,
        'Authentication': <LoginForm />,
        'Dropdown': <DropdownApp />,
      };
      
      const renderContent = () => {
          if (!activeProject) {
              return <div className="text-center"><h1 className="text-4xl font-bold dark:text-slate-200">Welcome!</h1><p className="mt-2 text-lg text-gray-600 dark:text-slate-400">Select a project above to see it in action.</p></div>
          }
          if(activeProject && projects[activeProject]){
              return projects[activeProject];
          }
          return <p>Project not found.</p>
      };

      return (
        <div className={`min-h-screen ${theme === 'light' ? 'bg-gray-100' : 'bg-slate-900'} transition-colors duration-300`}>
          <header className="bg-white dark:bg-slate-800 shadow-md p-4 sticky top-0 z-20">
            <div className="container mx-auto flex justify-between items-center">
              <h1 className="text-xl font-bold text-gray-800 dark:text-white">React Showcase</h1>
              <div className="flex items-center space-x-4">
                 <div className="hidden md:flex flex-wrap items-center gap-x-4 gap-y-2">
                    {Object.keys(projects).map(name => (
                      <button key={name} onClick={() => setActiveProject(name)} className={`px-3 py-1 rounded text-sm font-medium transition-colors ${activeProject === name ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600'}`}>{name}</button>
                    ))}
                 </div>
                 <button onClick={toggleTheme} className="text-2xl">{theme === 'light' ? '🌙' : '☀️'}</button>
              </div>
            </div>
             <div className="md:hidden mt-4 flex flex-wrap gap-2">
                {Object.keys(projects).map(name => (
                  <button key={name} onClick={() => setActiveProject(name)} className={`px-3 py-1 rounded text-sm font-medium transition-colors ${activeProject === name ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600'}`}>{name}</button>
                ))}
             </div>
          </header>
          <main className="container mx-auto p-4 md:p-8 flex items-center justify-center min-h-[calc(100vh-80px)]">
            {renderContent()}
          </main>
        </div>
      );
    };

    // --- Render the App ---
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <AuthProvider>
        <ThemeProvider>
          <App />
        </ThemeProvider>
      </AuthProvider>
    );

  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Enterprise Dashboard UI with Theming</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    // Configure Tailwind JIT to properly handle dynamic dark mode classes
    tailwind.config = {
      darkMode: 'class', // Enable class-based dark mode
      theme: {
        extend: {
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
          colors: {
            // Define a more nuanced color palette for themes
            primary: {
              light: '#3b82f6', // blue-500
              dark: '#60a5fa' // blue-400
            },
            background: {
              light: '#f3f4f6', // gray-100
              dark: '#111827'  // gray-900
            },
            surface: {
              light: '#ffffff',
              dark: '#1f2937' // gray-800
            },
            text: {
              light: '#1f2937', // gray-800
              dark: '#f9fafb'  // gray-50
            },
            subtle: {
                light: '#6b7280', // gray-500
                dark: '#9ca3af' // gray-400
            }
          }
        }
      }
    }
  </script>
  <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
  <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  
  <!-- Firebase SDKs -->
  <script type="module">
    // IMPORTANT: Replace with your actual Firebase project configuration
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_AUTH_DOMAIN",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_STORAGE_BUCKET",
      messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
      appId: "YOUR_APP_ID"
    };
    window.firebaseConfig = firebaseConfig;
  </script>
  <style>
    body { font-family: 'Inter', sans-serif; transition: background-color 0.3s ease, color 0.3s ease; }
    /* Spinner for loading states */
    .loader {
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-left-color: #3b82f6;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel" data-type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
    import { getFirestore, doc, onSnapshot, setDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
    import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

    const { useState, useEffect, useCallback, createContext, useContext, useMemo } = React;

    // --- Firebase Initialization ---
    // Initialize Firebase services, handling potential configuration errors.
    let app, db, auth;
    try {
        app = initializeApp(window.firebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);
    } catch (e) {
        console.error("Firebase initialization failed. Please add your Firebase config.", e);
        // Render an error message to the user if Firebase isn't configured
        document.getElementById('root').innerHTML = `<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert"><strong class="font-bold">Firebase Error:</strong><span class="block sm:inline"> Please configure your Firebase credentials in the HTML file.</span></div>`;
    }

    // --- Global State Management using Context API ---

    // 1. Theme Context (Project 10 - Advanced)
    const ThemeContext = createContext();

    const ThemeProvider = ({ children }) => {
        const [theme, setTheme] = useState('light'); // Default theme
        const user = useAuth()?.currentUser;

        // Effect to apply theme class to HTML element for global CSS styling
        useEffect(() => {
            const root = window.document.documentElement;
            root.classList.remove(theme === 'light' ? 'dark' : 'light');
            root.classList.add(theme);
        }, [theme]);
        
        // Effect to sync theme with Firestore for logged-in users
        useEffect(() => {
            if (user) {
                const userThemeRef = doc(db, "userPreferences", user.uid);
                const unsubscribe = onSnapshot(userThemeRef, (docSnap) => {
                    if (docSnap.exists() && docSnap.data().theme) {
                        setTheme(docSnap.data().theme);
                    } else {
                        // If no theme is set in Firestore, set default 'light'
                        setDoc(userThemeRef, { theme: 'light' }, { merge: true });
                    }
                });
                return () => unsubscribe();
            } else {
                // For guests, use localStorage
                const localTheme = localStorage.getItem('theme') || 'light';
                setTheme(localTheme);
            }
        }, [user]);

        const toggleTheme = useCallback(async () => {
            const newTheme = theme === 'light' ? 'dark' : 'light';
            setTheme(newTheme);
            if (user) {
                // Persist theme choice to Firestore for the logged-in user
                const userThemeRef = doc(db, "userPreferences", user.uid);
                await setDoc(userThemeRef, { theme: newTheme }, { merge: true });
            } else {
                // Save to localStorage for guests
                localStorage.setItem('theme', newTheme);
            }
        }, [theme, user]);

        const value = useMemo(() => ({ theme, toggleTheme }), [theme, toggleTheme]);

        return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
    };

    const useTheme = () => useContext(ThemeContext);

    // 2. Auth Context
    const AuthContext = createContext(null);
    const AuthProvider = ({ children }) => {
        const [currentUser, setCurrentUser] = useState(null);
        const [loading, setLoading] = useState(true);

        useEffect(() => {
            const unsubscribe = onAuthStateChanged(auth, user => {
                setCurrentUser(user);
                setLoading(false);
            });
            return unsubscribe; // Cleanup subscription on unmount
        }, []);
        
        const value = useMemo(() => ({ currentUser, loading }), [currentUser, loading]);

        return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;
    };
    const useAuth = () => useContext(AuthContext);

    // --- Reusable & Optimized Components ---
    
    // Memoized component to prevent re-renders when parent state changes
    const ThemedButton = React.memo(({ onClick, children, className = '' }) => {
        return (
            <button
                onClick={onClick}
                className={`bg-primary-light dark:bg-primary-dark text-white font-bold py-2 px-4 rounded-lg shadow-md hover:opacity-90 transition-opacity ${className}`}
            >
                {children}
            </button>
        );
    });

    const ThemedInput = React.memo(({...props}) => {
        return (
            <input 
                {...props}
                className="w-full p-3 bg-gray-200 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-light dark:focus:ring-primary-dark transition-shadow"
            />
        );
    });
    
    const Loader = () => <div className="loader mx-auto"></div>;

    // --- Feature Components ---

    // Project 11: Weather App (Upgraded)
    const WeatherWidget = React.memo(() => {
        const [city, setCity] = useState('Pimpri-Chinchwad');
        const [weather, setWeather] = useState(null);
        const [loading, setLoading] = useState(false);
        const [error, setError] = useState(null);
        
        // IMPORTANT: Replace with your OpenWeatherMap API key
        const API_KEY = "YOUR_OPENWEATHERMAP_API_KEY";

        const fetchWeather = useCallback(async () => {
            if (!city.trim() || API_KEY === "YOUR_OPENWEATHERMAP_API_KEY") {
                setError(API_KEY === "YOUR_OPENWEATHERMAP_API_KEY" ? "Please set your Weather API key." : null);
                setWeather(null);
                return;
            }
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);
                if (!response.ok) throw new Error('City not found.');
                const data = await response.json();
                setWeather(data);
            } catch (err) {
                setError(err.message);
                setWeather(null);
            } finally {
                setLoading(false);
            }
        }, [city]);
        
        useEffect(() => { fetchWeather(); }, []); // Fetch on initial load

        return (
            <div className="bg-surface-light dark:bg-surface-dark p-6 rounded-xl shadow-lg w-full">
                <h2 className="text-xl font-bold mb-4 text-text-light dark:text-text-dark">Live Weather</h2>
                <div className="flex gap-2 mb-4">
                    <ThemedInput
                        type="text"
                        value={city}
                        onChange={(e) => setCity(e.target.value)}
                        placeholder="Enter a city"
                    />
                    <ThemedButton onClick={fetchWeather}>Search</ThemedButton>
                </div>
                {loading && <Loader />}
                {error && <p className="text-red-500 text-center">{error}</p>}
                {weather && (
                    <div className="text-center space-y-2">
                        <p className="text-2xl font-bold text-text-light dark:text-text-dark">{weather.name}, {weather.sys.country}</p>
                        <p className="text-5xl font-extrabold text-primary-light dark:text-primary-dark">{Math.round(weather.main.temp)}°C</p>
                        <p className="text-lg capitalize text-subtle-light dark:text-subtle-dark">{weather.weather[0].description}</p>
                    </div>
                )}
            </div>
        );
    });

    // Project 12: Real-time Chat (Upgraded)
    // NOTE: Requires Firestore security rules to be set up for `chatMessages`
    const ChatWidget = () => {
        const [messages, setMessages] = useState([]);
        const [input, setInput] = useState('');
        const user = useAuth().currentUser;

        useEffect(() => {
            // This would require a real-time listener to a chat collection in a real app
            // For this demo, we'll keep it simple.
        }, []);
        
        const sendMessage = () => {
            if (!input.trim()) return;
            const newMessage = {
                id: Date.now(),
                text: input,
                sender: user ? user.email.split('@')[0] : 'Guest'
            };
            setMessages(prev => [...prev, newMessage]);
            setInput('');
        };

        return (
            <div className="bg-surface-light dark:bg-surface-dark p-6 rounded-xl shadow-lg w-full flex flex-col h-96">
                <h2 className="text-xl font-bold mb-4 text-text-light dark:text-text-dark">Team Chat</h2>
                <div className="flex-grow overflow-y-auto space-y-4 pr-2 mb-4">
                    {messages.map((msg) => (
                        <div key={msg.id} className={`p-3 rounded-lg max-w-xs ${msg.sender === (user ? user.email.split('@')[0] : 'Guest') ? 'bg-primary-light text-white ml-auto' : 'bg-gray-200 dark:bg-gray-600 text-text-light dark:text-text-dark'}`}>
                            <strong className="block text-sm">{msg.sender}</strong>
                            {msg.text}
                        </div>
                    ))}
                </div>
                {user ? (
                    <div className="flex gap-2">
                        <ThemedInput type="text" value={input} onChange={(e) => setInput(e.target.value)} placeholder="Type a message..." />
                        <ThemedButton onClick={sendMessage}>Send</ThemedButton>
                    </div>
                ) : (
                    <p className="text-center text-subtle-light dark:text-subtle-dark">Please log in to chat.</p>
                )}
            </div>
        );
    };

    // --- Main Application ---
    
    // Login Screen for unauthenticated users
    const LoginScreen = () => {
        const [isLogin, setIsLogin] = useState(true);
        const [formData, setFormData] = useState({ email: '', password: '' });
        const [error, setError] = useState('');
        const [loading, setLoading] = useState(false);

        const handleSubmit = async (e) => {
            e.preventDefault();
            setLoading(true);
            setError('');
            try {
                if (isLogin) {
                    await signInWithEmailAndPassword(auth, formData.email, formData.password);
                } else {
                    await createUserWithEmailAndPassword(auth, formData.email, formData.password);
                }
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        return (
            <div className="w-full max-w-md mx-auto bg-surface-light dark:bg-surface-dark p-8 rounded-xl shadow-lg">
                <h1 className="text-3xl font-bold mb-6 text-center text-text-light dark:text-text-dark">{isLogin ? 'Welcome Back' : 'Create Account'}</h1>
                <form onSubmit={handleSubmit} className="space-y-4">
                    <ThemedInput type="email" placeholder="Email" value={formData.email} onChange={(e) => setFormData({...formData, email: e.target.value})} required />
                    <ThemedInput type="password" placeholder="Password" value={formData.password} onChange={(e) => setFormData({...formData, password: e.target.value})} required />
                    {error && <p className="text-red-500 text-sm text-center">{error}</p>}
                    <ThemedButton type="submit" className="w-full" disabled={loading}>{loading ? '...' : (isLogin ? 'Login' : 'Sign Up')}</ThemedButton>
                </form>
                <button onClick={() => setIsLogin(!isLogin)} className="w-full text-center mt-4 text-sm text-primary-light dark:text-primary-dark hover:underline">
                    {isLogin ? 'Need an account? Sign Up' : 'Already have an account? Login'}
                </button>
            </div>
        );
    };

    // The main dashboard shown to authenticated users
    const Dashboard = () => {
        const { theme, toggleTheme } = useTheme();
        const { currentUser } = useAuth();
        
        return (
             <div className="w-full text-text-light dark:text-text-dark">
                <header className="bg-surface-light dark:bg-surface-dark p-4 shadow-md flex justify-between items-center mb-8 rounded-xl">
                    <div>
                        <h1 className="text-2xl font-bold">Dashboard</h1>
                        <p className="text-subtle-light dark:text-subtle-dark">Welcome, {currentUser.email}</p>
                    </div>
                    <div className="flex items-center gap-4">
                         <button onClick={toggleTheme} className="text-3xl" aria-label="Toggle theme">
                            {theme === 'light' ? '🌙' : '☀️'}
                         </button>
                        <ThemedButton onClick={() => signOut(auth)}>Logout</ThemedButton>
                    </div>
                </header>
                
                <main className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <WeatherWidget />
                    <ChatWidget />
                    {/* Placeholder for CRUD App or other widgets */}
                    <div className="bg-surface-light dark:bg-surface-dark p-6 rounded-xl shadow-lg lg:col-span-2">
                        <h2 className="text-xl font-bold mb-4">Your Data</h2>
                        <p className="text-subtle-light dark:text-subtle-dark">A CRUD component or data table would go here, fully styled by the theme.</p>
                    </div>
                </main>
            </div>
        );
    };

    // App component decides whether to show Login or Dashboard
    const App = () => {
        const { currentUser } = useAuth();
        return (
            <div className="bg-background-light dark:bg-background-dark min-h-screen flex items-center justify-center p-4 sm:p-6 lg:p-8">
                {currentUser ? <Dashboard /> : <LoginScreen />}
            </div>
        );
    };

    // --- Render the Application ---
    const root = ReactDOM.createRoot(document.getElementById('root'));
    if (auth) { // Only render if Firebase was initialized successfully
        root.render(
            <AuthProvider>
                <ThemeProvider>
                    <App />
                </ThemeProvider>
            </AuthProvider>
        );
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Scalable CRUD Application</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@reduxjs/toolkit@1.9.5/dist/umd/redux-toolkit.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-redux@8.1.1/dist/react-redux.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/firebase@10.12.2/firebase-app.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/firebase@10.12.2/firebase-firestore.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    // Firebase Configuration (Replace with your Firebase project config)
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_AUTH_DOMAIN",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_STORAGE_BUCKET",
      messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
      appId: "YOUR_APP_ID"
    };

    // Initialize Firebase
    const app = firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore();

    // Redux Store Setup
    const { configureStore, createSlice } = RTK;
    const crudSlice = createSlice({
      name: 'crud',
      initialState: {
        items: [],
        loading: false,
        error: null,
        searchTerm: '',
        filterStatus: 'all',
        sortBy: 'createdAt',
        sortOrder: 'desc',
        currentPage: 1,
        itemsPerPage: 10,
        totalItems: 0,
      },
      reducers: {
        setItems: (state, action) => { state.items = action.payload; },
        setLoading: (state, action) => { state.loading = action.payload; },
        setError: (state, action) => { state.error = action.payload; },
        setSearchTerm: (state, action) => { state.searchTerm = action.payload; state.currentPage = 1; },
        setFilterStatus: (state, action) => { state.filterStatus = action.payload; state.currentPage = 1; },
        setSortBy: (state, action) => { state.sortBy = action.payload; },
        setSortOrder: (state, action) => { state.sortOrder = action.payload; },
        setCurrentPage: (state, action) => { state.currentPage = action.payload; },
        setTotalItems: (state, action) => { state.totalItems = action.payload; },
      },
    });

    const store = configureStore({
      reducer: { crud: crudSlice.reducer },
    });

    const { setItems, setLoading, setError, setSearchTerm, setFilterStatus, setSortBy, setSortOrder, setCurrentPage, setTotalItems } = crudSlice.actions;

    // Debounce utility for search
    const debounce = (func, wait) => {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
      };
    };

    // CRUD Operations with Firebase
    const fetchItems = async (dispatch, state) => {
      dispatch(setLoading(true));
      try {
        let query = db.collection('items');
        
        // Apply search
        if (state.searchTerm) {
          query = query.where('text', '>=', state.searchTerm)
                      .where('text', '<=', state.searchTerm + '\uf8ff');
        }

        // Apply filter
        if (state.filterStatus !== 'all') {
          query = query.where('status', '==', state.filterStatus);
        }

        // Apply sorting
        query = query.orderBy(state.sortBy, state.sortOrder);

        // Apply pagination
        const startAt = (state.currentPage - 1) * state.itemsPerPage;
        query = query.limit(state.itemsPerPage).startAt(startAt);

        const snapshot = await query.get();
        const items = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        // Get total count for pagination
        const totalSnapshot = await db.collection('items').get();
        dispatch(setTotalItems(totalSnapshot.size));
        
        dispatch(setItems(items));
        dispatch(setLoading(false));
      } catch (error) {
        dispatch(setError(error.message));
        dispatch(setLoading(false));
      }
    };

    const addItem = async (dispatch, item) => {
      try {
        const optimisticId = Date.now().toString();
        dispatch(setItems([...store.getState().crud.items, { ...item, id: optimisticId }]));
        await db.collection('items').add(item);
        fetchItems(dispatch, store.getState().crud);
      } catch (error) {
        dispatch(setError(error.message));
        fetchItems(dispatch, store.getState().crud);
      }
    };

    const updateItem = async (dispatch, id, text, status) => {
      try {
        const items = store.getState().crud.items;
        dispatch(setItems(items.map(item => item.id === id ? { ...item, text, status } : item)));
        await db.collection('items').doc(id).update({ text, status, updatedAt: new Date().toISOString() });
        fetchItems(dispatch, store.getState().crud);
      } catch (error) {
        dispatch(setError(error.message));
        fetchItems(dispatch, store.getState().crud);
      }
    };

    const deleteItem = async (dispatch, id) => {
      try {
        dispatch(setItems(store.getState().crud.items.filter(item => item.id !== id)));
        await db.collection('items').doc(id).delete();
        fetchItems(dispatch, store.getState().crud);
      } catch (error) {
        dispatch(setError(error.message));
        fetchItems(dispatch, store.getState().crud);
      }
    };

    // Item Component
    const Item = React.memo(({ item, onEdit, onDelete }) => {
      return (
        <li className="flex items-center p-2 border rounded-md">
          <span className="flex-grow text-gray-600">{item.text} ({item.status})</span>
          <button
            onClick={() => onEdit(item)}
            className="bg-yellow-500 text-white p-2 rounded-md hover:bg-yellow-600 mr-2"
          >
            Edit
          </button>
          <button
            onClick={() => onDelete(item.id)}
            className="bg-red-500 text-white p-2 rounded-md hover:bg-red-600"
          >
            Delete
          </button>
        </li>
      );
    });

    // Main CRUD Component
    const CrudApp = () => {
      const dispatch = ReactRedux.useDispatch();
      const { items, loading, error, searchTerm, filterStatus, sortBy, sortOrder, currentPage, itemsPerPage, totalItems } = ReactRedux.useSelector(state => state.crud);
      const [input, setInput] = React.useState('');
      const [status, setStatus] = React.useState('active');
      const [editId, setEditId] = React.useState(null);

      // Debounced search
      const debouncedSearch = React.useMemo(
        () => debounce((value) => dispatch(setSearchTerm(value)), 300),
        [dispatch]
      );

      React.useEffect(() => {
        fetchItems(dispatch, store.getState().crud);
      }, [dispatch, searchTerm, filterStatus, sortBy, sortOrder, currentPage]);

      const handleAddOrUpdate = () => {
        if (input.trim()) {
          if (editId) {
            dispatch(updateItem(editId, input, status));
            setEditId(null);
          } else {
            dispatch(addItem({ text: input, status, createdAt: new Date().toISOString() }));
          }
          setInput('');
          setStatus('active');
        }
      };

      const startEdit = (item) => {
        setInput(item.text);
        setStatus(item.status);
        setEditId(item.id);
      };

      const handleSearch = (e) => {
        debouncedSearch(e.target.value);
      };

      const totalPages = Math.ceil(totalItems / itemsPerPage);

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-4xl">
          <h1 className="text-2xl font-bold mb-4 text-center">Scalable CRUD App</h1>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          
          {/* Filters and Search */}
          <div className="flex flex-col md:flex-row mb-4 space-y-2 md:space-y-0 md:space-x-2">
            <input
              type="text"
              placeholder="Search items..."
              onChange={handleSearch}
              className="flex-grow p-2 border rounded-md focus:outline-none"
            />
            <select
              value={filterStatus}
              onChange={(e) => dispatch(setFilterStatus(e.target.value))}
              className="p-2 border rounded-md"
            >
              <option value="all">All</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
            <select
              value={sortBy}
              onChange={(e) => dispatch(setSortBy(e.target.value))}
              className="p-2 border rounded-md"
            >
              <option value="text">Text</option>
              <option value="createdAt">Created At</option>
            </select>
            <select
              value={sortOrder}
              onChange={(e) => dispatch(setSortOrder(e.target.value))}
              className="p-2 border rounded-md"
            >
              <option value="asc">Ascending</option>
              <option value="desc">Descending</option>
            </select>
          </div>

          {/* Input Form */}
          <div className="flex mb-4 space-x-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Enter item"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
              className="p-2 border rounded-md"
            >
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
            <button
              onClick={handleAddOrUpdate}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              {editId ? 'Update' : 'Add'}
            </button>
          </div>

          {/* Item List */}
          {loading ? (
            <p className="text-center">Loading...</p>
          ) : (
            <ul className="space-y-2">
              {items.map((item) => (
                <Item key={item.id} item={item} onEdit={startEdit} onDelete={() => dispatch(deleteItem(item.id))} />
              ))}
            </ul>
          )}

          {/* Pagination */}
          <div className="flex justify-center space-x-2 mt-4">
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i + 1}
                onClick={() => dispatch(setCurrentPage(i + 1))}
                className={`p-2 rounded-md ${currentPage === i + 1 ? 'bg-blue-600 text-white' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
              >
                {i + 1}
              </button>
            ))}
          </div>
        </div>
      );
    };

    // Render App with Redux Provider
    const App = () => (
      <ReactRedux.Provider store={store}>
        <CrudApp />
      </ReactRedux.Provider>
    );

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
