1)  Create a Simple Todo App

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Todo App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <style>
    /* Minimal Tailwind CSS subset for the Todo App */
    .bg-gray-100 { background-color: #f3f4f6; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .min-h-screen { min-height: 100vh; }
    .bg-white { background-color: #fff; }
    .p-6 { padding: 1.5rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
    .w-full { width: 100%; }
    .max-w-md { max-width: 28rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .text-center { text-align: center; }
    .flex-grow { flex-grow: 1; }
    .p-2 { padding: 0.5rem; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .rounded-l-md { border-top-left-radius: 0.375rem; border-bottom-left-radius: 0.375rem; }
    .focus\:outline-none:focus { outline: none; }
    .bg-blue-500 { background-color: #3b82f6; }
    .text-white { color: #fff; }
    .rounded-r-md { border-top-right-radius: 0.375rem; border-bottom-right-radius: 0.375rem; }
    .hover\:bg-blue-600:hover { background-color: #2563eb; }
    .space-y-2 > :not(:last-child) { margin-bottom: 0.5rem; }
    .justify-between { justify-content: space-between; }
    .rounded-md { border-radius: 0.375rem; }
    .cursor-pointer { cursor: pointer; }
    .line-through { text-decoration: line-through; }
    .text-gray-500 { color: #6b7280; }
    .text-red-500 { color: #ef4444; }
    .hover\:text-red-700:hover { color: #b91c1c; }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const TodoApp = () => {
      const [todos, setTodos] = useState([]);
      const [inputText, setInputText] = useState('');

      const handleInputChange = (e) => {
        setInputText(e.target.value);
      };

      const handleAddTodo = () => {
        if (inputText.trim()) {
          setTodos([...todos, { id: Date.now(), text: inputText, completed: false }]);
          setInputText('');
        }
      };

      const handleToggleTodo = (id) => {
        setTodos(todos.map((todo) => 
          todo.id === id ? { ...todo, completed: !todo.completed } : todo
        ));
      };

      const handleDeleteTodo = (id) => {
        setTodos(todos.filter((todo) => todo.id !== id));
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Todo App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={inputText}
              onChange={handleInputChange}
              placeholder="Add a new todo"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={handleAddTodo}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Add
            </button>
          </div>
          <ul className="space-y-2">
            {todos.map((todo) => (
              <li
                key={todo.id}
                className="flex justify-between items-center p-2 border rounded-md"
              >
                <span
                  onClick={() => handleToggleTodo(todo.id)}
                  className={`cursor-pointer ${todo.completed ? 'line-through text-gray-500' : ''}`}
                >
                  {todo.text}
                </span>
                <button
                  onClick={() => handleDeleteTodo(todo.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    };

    ReactDOM.render(<TodoApp />, document.getElementById('root'));
  </script>
</body>
</html>


======================================================================================================================================================================




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Todo App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const TodoApp = () => {
      const [todos, setTodos] = useState([]);
      const [inputText, setInputText] = useState('');

      const handleInputChange = (e) => {
        setInputText(e.target.value);
      };

      const handleAddTodo = (e) => {
        if (inputText.trim()) {
          setTodos([...todos, { id: Date.now(), text: inputText, completed: false }]);
          setInputText('');
        }
      };

      const handleToggleTodo = (id) => {
        setTodos(todos.map((todo) => 
          todo.id === id ? { ...todo, completed: !todo.completed } : todo)
        ));
      };

      const handleDeleteTodo = = (id) => {
        setTodos(todos.filter((todo) => todo.id !== id));
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Todo App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={inputText}
              onChange={handleInputChange}
              placeholder="Add a new todo"
              className="flex-grow p-2 border rounded-l-md focus:outline-none"
            />
            <button
              onClick={handleAddTodo}
              className="bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600"
            >
              Add
            </button>
          </div>
          <ul className="space-y-2">
            {todos.map((todo) => (
              <li
                key={todo.id}
                className="flex justify-between items-center p-2 border rounded-md"
              >
                <span
                  onClick={() => handleToggleTodo(todo.id)}
                  className={`cursor-pointer ${todo.completed ? 'line-through text-gray-500' : ''}`}
                >
                  {todo.text}
                </span>
                <button
                  onClick={() => handleDeleteTodo(todo.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    };

    ReactDOM.render(<TodoApp />, document.getElementById('root'));
  </script>
</body>
</html>
=========================================================================================================================================================================
2)  Build a Counter App

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Counter App</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Counter = () => {
      const [count, setCount] = useState(0);

      const handleIncrement = () => {
        setCount(count + 1);
      };

      const handleDecrement = () => {
        setCount(count - 1);
      };

      const handleReset = () => {
        setCount(0);
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm text-center">
          <h1 className="text-2xl font-bold mb-4">Counter App</h1>
          <p className="text-4xl font-semibold mb-4">{count}</p>
          <div className="flex justify-center space-x-4">
            <button
              onClick={handleIncrement}
              className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
            >
              Increment
            </button>
            <button
              onClick={handleDecrement}
              className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
            >
              Decrement
            </button>
            <button
              onClick={handleReset}
              className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600"
            >
              Reset
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Counter />, document.getElementById('root'));
  </script>
</body>
</html>

3)  Build a Form Handling Component

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Form Handling</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState } = React;

    const Form = () => {
      const [formData, setFormData] = useState({ name: '', email: '' });

      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
      };

      const handleSubmit = () => {
        console.log('Form Data:', formData);
        alert(`Submitted: Name=${formData.name}, Email=${formData.email}`);
        setFormData({ name: '', email: '' });
      };

      return (
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h1 className="text-2xl font-bold mb-4 text-center">Form Handling</h1>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Enter your name"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Enter your email"
                className="w-full p-2 border rounded-md focus:outline-none"
              />
            </div>
            <button
              onClick={handleSubmit}
              className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
            >
              Submit
            </button>
          </div>
        </div>
      );
    };

    ReactDOM.render(<Form />, document.getElementById('root'));
  </script>
</body>
</html>
