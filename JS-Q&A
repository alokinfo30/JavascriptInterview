# JavaScript Concepts: Basics, Async, Functional, Patterns, and Advanced Topics

## Basics (1–10)

### 1. What is the difference between var, let, and const?
`var`, `let`, and `const` are used to declare variables in JavaScript, but they differ in scope, hoisting, and mutability:
- **var**: Function-scoped, hoisted with `undefined`, can be redeclared and reassigned.
- **let**: Block-scoped, hoisted but not initialized (Temporal Dead Zone), can be reassigned but not redeclared in the same scope.
- **const**: Block-scoped, hoisted but not initialized, cannot be reassigned or redeclared, but objects/arrays declared with `const` can have their contents mutated.

```javascript
var x = 1; // Function-scoped, can be redeclared
let y = 2; // Block-scoped, can be reassigned
const z = 3; // Block-scoped, cannot be reassigned
x = 10; // OK
y = 20; // OK
z = 30; // Error: Assignment to constant variable
const obj = { a: 1 };
obj.a = 2; // OK: Object properties can be mutated
```
Summary Table:

Keyword	          Hoisted?	            Initialized?	                              Scope	Notes
var	                Yes	                undefined	                              Function/Global	Can be used before declaration, returns undefined.
let	                Yes	              Not initialized                           (TDZ)	Block	Causes ReferenceError if accessed before initialization.
const	              Yes	              Not initialized                           (TDZ)	Block	Same as let, but must be initialized at declaration and cannot be reassigned.

### 2. What is hoisting in JavaScript?
Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their containing scope during compilation. Variables declared with `var` are hoisted and initialized to `undefined`, while `let` and `const` are hoisted but not initialized (causing a Temporal Dead Zone).

```javascript
console.log(x); // undefined
var x = 5;
console.log(y); // ReferenceError: Cannot access 'y' before initialization
let y = 10;

function hoist() {
  console.log(a); // undefined
  var a = 20;
}
hoist();
```

### 3. Explain lexical scope with an example.
Lexical scope means a variable's scope is determined by its location in the source code. Inner functions have access to variables in their outer function's scope, even after the outer function has executed.

```javascript
function outer() {
  let name = "Alice";
  function inner() {
    console.log(name); // Alice
  }
  inner();
}
outer();
```

### 4. Difference between function declarations and function expressions?
- **Function Declaration**: Defined with the `function` keyword, hoisted fully (name and body), can be called before definition.
- **Function Expression**: A function assigned to a variable, only the variable is hoisted (not the function), can be named or anonymous.

```javascript
// Declaration
hoisted(); // Works
function hoisted() {
  console.log("Hoisted!");
}

// Expression
notHoisted(); // TypeError: notHoisted is not a function
var notHoisted = function() {
  console.log("Not hoisted!");
};
```

### 5. What are arrow functions and how are they different?
Arrow functions (`=>`) are a concise syntax for function expressions, introduced in ES6. They differ from regular functions:
- No `this` binding; they inherit `this` from the enclosing scope.
- No `arguments` object.
- Cannot be used as constructors (no `new`).
- Implicit return for single expressions.

```javascript
const add = (a, b) => a + b; // Implicit return
console.log(add(2, 3)); // 5

const obj = {
  name: "Bob",
  sayName: function() { console.log(this.name); }, // Bob
  sayNameArrow: () => { console.log(this.name); } // undefined (this is global)
};
obj.sayName(); // Calls sayName, logs: Bob
obj.sayNameArrow(); // Calls sayNameArrow, logs: undefined


const obj = {
  name: "Bob",
  sayName: function() { console.log(this.name); }, // Logs: Bob
  sayNameArrow: function() {
    const arrow = () => { console.log(this.name); };
    arrow();
  } // Logs: Bob
};
obj.sayName(); // Logs: Bob
obj.sayNameArrow(); // Logs: Bob

### 6. What is the value of this in different contexts?
`this` refers to the context in which a function is called:
- **Global context**: `this` is `window` (browser) or `global` (Node.js).
- **Object method**: `this` is the object the method is called on.
- **Constructor**: `this` is the new instance.
- **Event handlers**: `this` is the element that triggered the event.
- **Arrow functions**: `this` is inherited from the enclosing lexical scope.

```javascript
console.log(this); // window/global
const obj = {
  name: "Alice",
  greet() { console.log(this.name); }
};
obj.greet(); // Alice

function Person() { this.name = "Bob"; }
const p = new Person();
console.log(p.name); // Bob
```

### 7. What are call, apply, and bind?
These methods control the value of `this` in a function:
- **call()**: Invokes a function with a specified `this` and individual arguments.
- **apply()**: Invokes a function with a specified `this` and an array of arguments.
- **bind()**: Returns a new function with a fixed `this` and optional preset arguments.

```javascript
function greet(greeting) {
  console.log(`${greeting}, ${this.name}`);
}
const person = { name: "Alice" };
greet.call(person, "Hello"); // Hello, Alice
greet.apply(person, ["Hi"]); // Hi, Alice
const boundGreet = greet.bind(person, "Hey");
boundGreet(); // Hey, Alice
```

### 8. Difference between == and ===?
- **==**: Loose equality, performs type coercion before comparison.
- **===**: Strict equality, checks value and type without coercion.

```javascript
console.log(5 == "5"); // true (coerces string to number)
console.log(5 === "5"); // false (different types)
console.log(null == undefined); // true
console.log(null === undefined); // false
```

### 9. What is event bubbling and event capturing?
- **Event Bubbling**: Events propagate from the target element up to the root (default behavior).
- **Event Capturing**: Events propagate from the root down to the target (enabled by setting `addEventListener`'s third argument to `true`).

```javascript
document.querySelector("#parent").addEventListener("click", () => console.log("Parent clicked"), true); // Capturing
document.querySelector("#child").addEventListener("click", () => console.log("Child clicked")); // Bubbling
// Clicking #child logs: "Parent clicked" (capturing), then "Child clicked" (bubbling)
```

### 10. What is the DOM and how is it manipulated?
The Document Object Model (DOM) is a tree-like representation of a web page's structure, allowing JavaScript to interact with HTML/CSS. Manipulation involves accessing, modifying, or creating elements.

```javascript
// Accessing
const div = document.querySelector("#myDiv");
// Modifying
div.textContent = "New content";
div.style.color = "blue";
// Creating
const p = document.createElement("p");
p.textContent = "New paragraph";
document.body.appendChild(p);
```

## Async & Scope (11–20)

### 11. Synchronous vs. asynchronous code
- **Synchronous**: Code executes sequentially, blocking further execution until complete.
- **Asynchronous**: Code executes without blocking, using callbacks, Promises, or async/await to handle results later.

```javascript
// Synchronous
console.log("Start");
function sync() { console.log("Sync"); }
sync();
console.log("End");

// Asynchronous
console.log("Start");
setTimeout(() => console.log("Async"), 1000);
console.log("End");
```

### 12. What is the Event Loop?
The Event Loop is a mechanism that handles asynchronous operations by continuously checking the call stack and task queue. If the stack is empty, it moves tasks from the queue to the stack for execution.

```javascript
console.log("Start");
setTimeout(() => console.log("Timeout"), 0);
console.log("End");
// Logs: Start, End, Timeout (setTimeout is queued)
```

### 13. Microtasks vs. macrotasks
- **Macrotasks**: Tasks like `setTimeout`, `setInterval`, and I/O operations, executed in the task queue.
- **Microtasks**: Higher-priority tasks like Promises and `queueMicrotask`, executed after the current stack but before the next macrotask.

```javascript
setTimeout(() => console.log("Macrotask"), 0);
Promise.resolve().then(() => console.log("Microtask"));
console.log("Sync");
// Logs: Sync, Microtask, Macrotask
```

### 14. What is a callback function?
A callback is a function passed as an argument to another function, executed after an event or task completes.

```javascript
function fetchData(callback) {
  setTimeout(() => callback("Data"), 1000);
}
fetchData((data) => console.log(data)); // Logs: Data
```

### 15. What is callback hell and how to avoid it?
Callback hell is nested callbacks that make code hard to read. Avoid it using Promises, async/await, or modularizing code.

```javascript
// Callback hell
setTimeout(() => {
  console.log("Step 1");
  setTimeout(() => {
    console.log("Step 2");
  }, 1000);
}, 1000);

// Using async/await
async function run() {
  await new Promise(resolve => setTimeout(resolve, 1000));
  console.log("Step 1");
  await new Promise(resolve => setTimeout(resolve, 1000));
  console.log("Step 2");
}
run();
```

### 16. What is a Promise in JavaScript?
A Promise is an object representing the eventual completion or failure of an asynchronous operation, with states: pending, fulfilled, or rejected.

```javascript
const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Success"), 1000);
});
promise.then(result => console.log(result)); // Success
promise.catch(error => console.log(error));
```

### 17. How does async/await work?
`async` declares a function that returns a Promise. `await` pauses execution inside an `async` function until a Promise resolves.

```javascript
async function fetchData() {
  try {
    const data = await new Promise(resolve => setTimeout(() => resolve("Data"), 1000));
    console.log(data); // Data
  } catch (error) {
    console.log(error);
  }
}
fetchData();
```

### 18. Shallow copy vs. deep copy
- **Shallow copy**: Copies top-level properties, but nested objects are referenced.
- **Deep copy**: Copies all levels, creating independent copies of nested objects.

```javascript
// Shallow copy
const obj = { a: 1, b: { c: 2 } };
const shallow = { ...obj };
shallow.b.c = 3;
console.log(obj.b.c); // 3 (shared reference)

// Deep copy
const deep = JSON.parse(JSON.stringify(obj));
deep.b.c = 4;
console.log(obj.b.c); // 3 (independent)
```

### 19. Difference between null, undefined, and NaN
- **null**: Explicitly represents "no value" or intentional absence.
- **undefined**: Variable declared but not assigned or missing function return.
- **NaN**: Result of invalid mathematical operations, not a number.

```javascript
let a;
console.log(a); // undefined
let b = null;
console.log(b); // null
console.log(0 / 0); // NaN
console.log(typeof NaN); // number
```

### 20. What is a higher-order function?
A higher-order function takes functions as arguments or returns a function.

```javascript
function higherOrder(fn) {
  return fn();
}
function sayHello() {
  return "Hello";
}
console.log(higherOrder(sayHello)); // Hello
```

## Functional & Modern JS (21–30)

### 21. What is a pure function?
A pure function always produces the same output for the same input, has no side effects, and doesn't rely on external state.

```javascript
// Pure
function add(a, b) {
  return a + b;
}
console.log(add(2, 3)); // Always 5

// Impure
let count = 0;
function increment() {
  return ++count; // Modifies external state
}
```

### 22. What is immutability and how to achieve it?
Immutability means data cannot be changed after creation. Achieve it using `const`, `Object.freeze()`, or libraries like Immutable.js.

```javascript
const arr = [1, 2, 3];
arr.push(4); // OK, array is mutable
const frozen = Object.freeze([1, 2, 3]);
frozen.push(4); // Error: Cannot modify frozen object
```

### 23. What is the typeof operator?
The `typeof` operator returns the type of a value as a string.

```javascript
console.log(typeof 42); // number
console.log(typeof "hello"); // string
console.log(typeof null); // object (historical bug)
console.log(typeof undefined); // undefined
console.log(typeof [1, 2]); // object
```

### 24. What are template literals?
Template literals are string literals allowing embedded expressions, using backticks (\`) and `${}` for interpolation.

```javascript
const name = "Alice";
console.log(`Hello, ${name}!`); // Hello, Alice!
console.log(`Sum: ${1 + 2}`); // Sum: 3
```

### 25. What is destructuring in JavaScript?
Destructuring extracts values from arrays or objects into variables.

```javascript
// Array destructuring
const [a, b] = [1, 2];
console.log(a, b); // 1, 2

// Object destructuring
const { name, age } = { name: "Alice", age: 25 };
console.log(name, age); // Alice, 25
```

### 26. Spread syntax vs. rest parameters
- **Spread syntax (`...`)**: Expands elements of an iterable/array or object properties.
- **Rest parameters (`...`)**: Collects remaining arguments into an array.

```javascript
// Spread
const arr1 = [1, 2];
const arr2 = [...arr1, 3, 4]; // [1, 2, 3, 4]
const obj1 = { a: 1 };
const obj2 = { ...obj1, b: 2 }; // { a: 1, b: 2 }

// Rest
function sum(...numbers) {
  return numbers.reduce((a, b) => a + b, 0);
}
console.log(sum(1, 2, 3)); // 6
```

### 27. for, for...in, and for...of — difference?
- **for**: Traditional loop with index control.
- **for...in**: Iterates over enumerable properties of an object.
- **for...of**: Iterates over values of iterable objects (arrays, strings, etc.).

```javascript
const arr = [1, 2, 3];
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]); // 1, 2, 3
}
for (let key in arr) {
  console.log(key); // 0, 1, 2 (indices)
}
for (let value of arr) {
  console.log(value); // 1, 2, 3
}
```

### 28. What is a closure?
A closure is a function that retains access to its lexical scope's variables even after the outer function has executed.

```javascript
function outer() {
  let count = 0;
  return function inner() {
    return ++count;
  };
}
const counter = outer();
console.log(counter()); // 1
console.log(counter()); // 2
```

### 29. What is currying in JavaScript?
Currying transforms a function with multiple arguments into a sequence of single-argument functions.

```javascript
function curry(fn) {
  return function curried(...args) {
    if (args.length >= fn.length) {
      return fn(...args);
    }
    return (...nextArgs) => curried(...args, ...nextArgs);
  };
}
const add = (a, b, c) => a + b + c;
const curriedAdd = curry(add);
console.log(curriedAdd(1)(2)(3)); // 6
```

### 30. What are default parameters?
Default parameters allow functions to have predefined values if arguments are omitted or undefined.

```javascript
function greet(name = "Guest") {
  return `Hello, ${name}`;
}
console.log(greet()); // Hello, Guest
console.log(greet("Alice")); // Hello, Alice
```

## Common Patterns (31–40)

### 31. Difference between map(), forEach(), and filter()
- **map()**: Creates a new array by applying a function to each element.
- **forEach()**: Executes a function for each element, no return value.
- **filter()**: Creates a new array with elements that pass a test.

```javascript
const arr = [1, 2, 3];
console.log(arr.map(x => x * 2)); // [2, 4, 6]
arr.forEach(x => console.log(x)); // 1, 2, 3
console.log(arr.filter(x => x > 1)); // [2, 3]
```

### 32. Falsy vs. truthy values
- **Falsy**: Values that evaluate to `false` in a boolean context: `false`, `0`, `-0`, `""`, `null`, `undefined`, `NaN`.
- **Truthy**: All other values.

```javascript
if (0) {
  console.log("Truthy");
} else {
  console.log("Falsy"); // Logs: Falsy
}
if ("hello") {
  console.log("Truthy"); // Logs: Truthy
}
```

### 33. What is optional chaining (?.)
Optional chaining allows safe access to nested properties without checking each level for `null` or `undefined`.

```javascript
const obj = { user: { name: "Alice" } };
console.log(obj?.user?.name); // Alice
console.log(obj?.user?.age?.value); // undefined (no error)
```

### 34. What is nullish coalescing (??)
Nullish coalescing returns the right operand if the left is `null` or `undefined`, otherwise the left operand.

```javascript
const a = null ?? "default"; // default
const b = 0 ?? 42; // 0 (not null/undefined)
console.log(a, b);
```

### 35. What is a memory leak? How to avoid it?
A memory leak occurs when memory is not released, causing performance issues. Avoid by:
- Removing event listeners.
- Clearing intervals/timeouts.
- Avoiding global variables.
- Using WeakMap/WeakSet for temporary references.

```javascript
// Potential leak
let data = [];
function add() {
  data.push(new Array(1000000).fill(0)); // Keeps growing
}
// Fix: Clear or limit data
function addLimited() {
  if (data.length > 10) data = [];
  data.push(new Array(1000000).fill(0));
}
```

### 36. What are WeakMap and WeakSet?
- **WeakMap**: A map where keys are objects, and entries are garbage-collected if the key is no longer referenced.
- **WeakSet**: A set of objects, with entries garbage-collected if no other references exist.

```javascript
let obj = {};
const wm = new WeakMap();
wm.set(obj, "data");
obj = null; // Entry is eligible for garbage collection
```

### 37. Stack vs. heap memory
- **Stack**: Stores primitive values and function call frames, fast and fixed-size.
- **Heap**: Stores objects and dynamic data, slower and managed by garbage collection.

```javascript
let a = 1; // Stack
let obj = { b: 2 }; // Heap
function foo() {
  let c = 3; // Stack
}
foo(); // Call frame on stack
```

### 38. Difference between debounce and throttle
- **Debounce**: Delays function execution until a specified time has passed since the last call.
- **Throttle**: Limits function execution to once every specified interval.

```javascript
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => fn(...args), delay);
  };
}
function throttle(fn, delay) {
  let last = 0;
  return function(...args) {
    const now = Date.now();
    if (now - last >= delay) {
      fn(...args);
      last = now;
    }
  };
}
```

### 39. How setTimeout & setInterval really work
- **setTimeout**: Schedules a function to run after a delay, added to the macrotask queue.
- **setInterval**: Repeatedly schedules a function at fixed intervals, also using the macrotask queue.

```javascript
setTimeout(() => console.log("Delayed"), 1000); // Runs once after 1s
setInterval(() => console.log("Every second"), 1000); // Runs every 1s
```

### 40. Purpose of Promise.all, Promise.any, Promise.race
- **Promise.all**: Resolves when all promises resolve, or rejects with the first rejection.
- **Promise.any**: Resolves with the first fulfilled promise, or rejects if all fail.
- **Promise.race**: Resolves or rejects with the first promise that settles.

```javascript
const p1 = Promise.resolve("One");
const p2 = new Promise(resolve => setTimeout(() => resolve("Two"), 1000));
Promise.all([p1, p2]).then(values => console.log(values)); // ["One", "Two"]
Promise.race([p1, p2]).then(value => console.log(value)); // One
Promise.any([Promise.reject("Fail"), p1]).then(value => console.log(value)); // One
```

## Advanced Topics (41–50)

### 41. Difference between Object.freeze() and Object.seal()
- **Object.freeze()**: Prevents modification of existing properties and adding new ones; immutable.
- **Object.seal()**: Prevents adding or deleting properties, but allows modifying existing ones.

```javascript
const obj = { a: 1 };
Object.freeze(obj);
obj.a = 2; // Ignored
obj.b = 3; // Ignored
console.log(obj); // { a: 1 }

const sealed = { a: 1 };
Object.seal(sealed);
sealed.a = 2; // OK
sealed.b = 3; // Ignored
console.log(sealed); // { a: 2 }
```

### 42. Object.keys(), Object.values(), Object.entries()
- **Object.keys()**: Returns an array of an object's enumerable property names.
- **Object.values()**: Returns an array of an object's enumerable property values.
- **Object.entries()**: Returns an array of [key, value] pairs.

```javascript
const obj = { a: 1, b: 2 };
console.log(Object.keys(obj)); // ["a", "b"]
console.log(Object.values(obj)); // [1, 2]
console.log(Object.entries(obj)); // [["a", 1], ["b", 2]]
```

### 43. How do JS modules work? (import/export)
Modules allow encapsulating code, with `export` to share and `import` to use. Supports default and named exports.

```javascript
// math.js
export const add = (a, b) => a + b;
export default (x) => x * x;

// main.js
import square, { add } from './math.js';
console.log(add(2, 3)); // 5
console.log(square(4)); // 16
```

### 44. What is an IIFE?
An Immediately Invoked Function Expression (IIFE) is a function defined and executed immediately, often used to avoid polluting the global scope.

```javascript
(function() {
  let secret = "Hidden";
  console.log(secret); // Hidden
})();
console.log(typeof secret); // undefined
```

### 45. What is event delegation?
Event delegation uses a single event listener on a parent to handle events from multiple children, leveraging event bubbling.

```javascript
document.querySelector("#list").addEventListener("click", (e) => {
  if (e.target.tagName === "LI") {
    console.log(e.target.textContent);
  }
});
```

### 46. Deep equality vs. strict equality
- **Strict equality (`===`)**: Checks value and type.
- **Deep equality**: Recursively compares object properties for equality.

```javascript
function deepEqual(a, b) {
  if (a === b) return true;
  if (typeof a !== "object" || typeof b !== "object" || a === null || b === null) return false;
  const keysA = Object.keys(a), keysB = Object.keys(b);
  if (keysA.length !== keysB.length) return false;
  for (let key of keysA) {
    if (!keysB.includes(key) || !deepEqual(a[key], b[key])) return false;
  }
  return true;
}
console.log({ a: 1 } === { a: 1 }); // false
console.log(deepEqual({ a: 1 }, { a: 1 })); // true
```

### 47. How does the JS engine work internally?
The JS engine (e.g., V8) parses code, compiles it to machine code, and executes it. Key components:
- **Parser**: Creates an Abstract Syntax Tree (AST).
- **Interpreter**: Executes code quickly (e.g., Ignition in V8).
- **Compiler**: Optimizes code for performance (e.g., TurboFan in V8).
- **Garbage Collector**: Manages memory.

```javascript
// Simplified example
function add(a, b) {
  return a + b;
}
// Engine: Parses to AST, interprets, then optimizes to machine code
```

### 48. bind() vs. arrow function for this
- **bind()**: Explicitly sets `this` for a function, creating a new function.
- **Arrow function**: Inherits `this` from the lexical scope, no binding needed.

```javascript
const obj = {
  name: "Alice",
  say: function() { console.log(this.name); },
  sayArrow: () => console.log(this.name)
};
const boundSay = obj.say.bind(obj);
boundSay(); // Alice
obj.sayArrow(); // undefined (this is global)
```

### 49. How to handle errors (try/catch/finally)
`try/catch/finally` handles exceptions:
- **try**: Code that might throw an error.
- **catch**: Handles the error.
- **finally**: Runs regardless of outcome.

```javascript
try {
  throw new Error("Oops");
} catch (error) {
  console.log(error.message); // Oops
} finally {
  console.log("Cleanup"); // Cleanup
}
```

### 50. How does garbage collection work in JS?
JavaScript uses a mark-and-sweep garbage collector to reclaim memory from objects no longer referenced. WeakMap/WeakSet help by allowing garbage collection of keys/objects.


let obj = { data: "Heavy" };
obj = null; // Eligible for garbage collection

Concurrency in **Node.js** is handled differently compared to traditional multi-threaded environments. Here’s a breakdown of **how concurrency works in Node.js**:

---

### 🔁 1. **Single-threaded Event Loop**

Node.js is **single-threaded**, meaning it runs JavaScript code in a single main thread. However, it achieves concurrency using the **event loop** and **asynchronous callbacks**.

---

### ⚙️ 2. **Non-blocking I/O and Asynchronous Operations**

Node.js uses **non-blocking I/O**, which means it does **not wait** for an operation (like file read, DB query) to complete before moving to the next one.

Example:

```javascript
const fs = require('fs');

fs.readFile('file.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log('File content:', data);
});

console.log('Reading file...');
```

**Output:**

```
Reading file...
File content: <file contents>
```

Even though `readFile` takes time, the main thread doesn't wait and continues execution.

---

### 🔄 3. **Event Loop Phases**

The event loop cycles through several phases:

* **Timers**: `setTimeout`, `setInterval`
* **I/O callbacks**
* **Idle, prepare**
* **Poll**: Retrieves new I/O events
* **Check**: `setImmediate()`
* **Close callbacks**

---

### 🧵 4. **libuv and Thread Pool**

Internally, Node.js uses **libuv**, a C++ library, to manage:

* Asynchronous I/O
* A **thread pool** (default 4 threads)

Expensive operations (e.g., file system, crypto, DNS) are **delegated to the thread pool**, keeping the event loop free.

Example using `crypto`:

```javascript
const crypto = require('crypto');

console.time('hash');
crypto.pbkdf2('password', 'salt', 100000, 64, 'sha512', () => {
  console.timeEnd('hash');
});
```

Even though this is CPU-intensive, it doesn't block the main thread because it runs in the thread pool.

---

### ✅ Summary

| Component            | Role                                             |
| -------------------- | ------------------------------------------------ |
| **Event Loop**       | Manages the execution of async tasks/callbacks   |
| **libuv**            | C++ library providing event loop and thread pool |
| **Thread Pool**      | Handles expensive tasks like I/O, DNS, crypto    |
| **Non-blocking I/O** | Enables efficient multitasking                   |

---

### 🚨 Important Note

* Node.js is **concurrent** (can handle many tasks at once),
* But **not parallel** (doesn't execute JS code in multiple threads unless using `Worker Threads`)
Concurrency in Node.js is a key feature that allows it to handle multiple operations efficiently without requiring multiple threads, primarily due to its **single-threaded, event-driven architecture**. Here’s a concise explanation of how concurrency works in Node.js:

### 1. **Single-Threaded Event Loop**
- Node.js operates on a **single-threaded event loop** model. This means it uses one main thread (the event loop) to process JavaScript code and handle tasks.
- The event loop continuously checks for events (like HTTP requests, file I/O, timers, etc.) and executes their associated callbacks when the events are ready.
- Despite being single-threaded, Node.js achieves concurrency by offloading time-consuming operations to a **worker pool** or the operating system, allowing the main thread to remain free for other tasks.

### 2. **Non-Blocking I/O**
- Node.js uses **non-blocking I/O** operations, meaning that I/O tasks (like reading files, querying databases, or making network requests) don’t block the main thread.
- When an I/O operation is initiated, Node.js delegates it to the underlying system (via the **libuv** library) and continues processing other tasks. Once the operation completes, a callback, Promise, or async/await handler is placed in the event queue for execution.

### 3. **Event-Driven Architecture**
- Node.js relies on an **event-driven** model where operations emit events (e.g., "data received" or "file read complete").
- The **event loop** listens for these events and triggers the appropriate callback functions when events occur.
- The event loop has several phases, such as:
  - **Timers**: Executes callbacks for `setTimeout` and `setInterval`.
  - **Pending Callbacks**: Handles I/O callbacks (e.g., file or network operations).
  - **Poll**: Retrieves new I/O events and executes their callbacks.
  - **Check**: Executes `setImmediate` callbacks.
  - **Close**: Handles cleanup for closed resources.

### 4. **Libuv and the Worker Pool**
- The **libuv** library is at the core of Node.js’s concurrency model. It provides the event loop and manages asynchronous operations.
- For CPU-intensive tasks (e.g., cryptographic operations, compression), Node.js offloads them to a **worker pool** (a set of threads managed by libuv). This keeps the main thread free for handling other tasks.
- By default, the worker pool has 4 threads, but this can be adjusted.

### 5. **Asynchronous Programming Patterns**
Node.js supports concurrency through asynchronous programming constructs:
- **Callbacks**: Functions passed as arguments to be executed after an operation completes.
- **Promises**: A cleaner way to handle asynchronous operations, allowing chaining with `.then()` or `.catch()`.
- **Async/Await**: Syntactic sugar over Promises, making asynchronous code look synchronous and easier to read.
  
Example:
```javascript
const fs = require('fs').promises;

async function readFileAsync() {
  try {
    const data = await fs.readFile('example.txt', 'utf8');
    console.log(data);
  } catch (err) {
    console.error(err);
  }
}

readFileAsync();
```
Here, `fs.readFile` is non-blocking, and the event loop continues processing other tasks while the file is being read.

### 6. **How Concurrency is Achieved**
- **I/O-bound tasks**: Operations like network requests or file reading are offloaded to the operating system or libuv, allowing the event loop to handle other tasks concurrently.
- **CPU-bound tasks**: Heavy computations are offloaded to the worker pool, preventing the main thread from being blocked.
- **Event queue**: The event loop processes tasks in a queue, ensuring that callbacks are executed in the correct order without needing multiple threads.

### 7. **Limitations and Considerations**
- **Single-threaded limitation**: Since JavaScript execution is single-threaded, CPU-intensive tasks (e.g., complex calculations) can block the event loop unless offloaded to the worker pool or separate processes.
- **Scaling concurrency**: For high concurrency, Node.js applications can use the `cluster` module to fork multiple processes, each running its own event loop, to utilize multiple CPU cores.
- **Error handling**: Asynchronous code requires careful error handling to avoid uncaught exceptions or unhandled Promise rejections.

### Summary
Node.js achieves concurrency through its **single-threaded event loop**, **non-blocking I/O**, and **event-driven architecture**, with the help of **libuv** for managing asynchronous operations and a **worker pool** for CPU-intensive tasks. This allows Node.js to handle thousands of concurrent connections efficiently, making it ideal for I/O-heavy applications like web servers or APIs. However, for CPU-bound tasks, developers must use worker threads or clustering to avoid blocking the event loop

Node.js is renowned for its ability to handle a large number of concurrent connections efficiently, despite being fundamentally **single-threaded** for its JavaScript execution. This might seem counter-intuitive, but it's achieved through a clever combination of architectural components:

Here's a breakdown of how concurrency works in Node.js:

1.  **Single-threaded JavaScript Execution:**
    * The core of Node.js runs on a single thread. This means your JavaScript code, at any given moment, executes one line at a time. This simplifies programming as you don't have to worry about complex multi-threading issues like deadlocks or race conditions within your JavaScript code.
    * This single thread is responsible for handling incoming requests, executing your business logic, and initiating I/O operations.

2.  **Non-blocking I/O:**
    * This is the cornerstone of Node.js's concurrency model. When Node.js encounters an I/O operation (like reading a file, querying a database, making an HTTP request), it doesn't wait for that operation to complete. Instead, it **offloads** the I/O task to the underlying operating system or a **thread pool** (provided by `libuv`, a C++ library).
    * While the I/O operation is in progress, the single JavaScript thread is **free to continue executing other code** and handling other incoming requests. This is "non-blocking" because the main thread isn't blocked by slow I/O.

3.  **Event Loop:**
    * The **Event Loop** is the heart of Node.js's asynchronous nature. It's a continuous loop that constantly checks for tasks to be executed.
    * When an I/O operation completes, a "callback" function associated with that operation is placed into an **event queue**.
    * The Event Loop monitors the call stack (where currently executing JavaScript code resides) and the event queue. When the call stack is empty (meaning the main thread isn't busy with synchronous JavaScript), the Event Loop picks up the next callback from the event queue and pushes it onto the call stack for execution. This mechanism ensures that I/O-bound tasks don't block the main thread.

4.  **`libuv` and Thread Pool:**
    * Node.js leverages `libuv`, a multi-platform asynchronous I/O library. `libuv` provides the Event Loop, and crucially, it manages a **thread pool**.
    * While JavaScript execution is single-threaded, `libuv` uses a pool of worker threads (typically 4 by default, but configurable) to handle computationally intensive tasks or certain I/O operations that cannot be handled directly by the operating system's asynchronous I/O mechanisms (e.g., certain file system operations, DNS lookups, cryptographic functions).
    * When an operation is offloaded to the thread pool, it runs in a separate C++ thread, freeing up the main JavaScript thread. Once the task in the thread pool is complete, its associated callback is placed in the event queue for the Event Loop to process.

5.  **Callbacks, Promises, and Async/Await:**
    * Node.js relies heavily on **callbacks** to manage asynchronous operations. When an asynchronous task completes, a specified callback function is invoked.
    * To make asynchronous code more readable and manageable, Node.js introduced **Promises**, which provide a more structured way to handle asynchronous operations and their eventual success or failure.
    * Even further, **`async/await`** (built on top of Promises) provides a more synchronous-looking syntax for asynchronous code, making it even easier to write and understand.

6.  **Cluster Module (for CPU-bound tasks and true parallelism):**
    * While the single-threaded Event Loop is excellent for I/O-bound tasks, it can become a bottleneck for **CPU-bound tasks** (e.g., heavy computations, complex image processing). If a long-running synchronous CPU-bound operation is executed on the main thread, it will block the Event Loop, making the application unresponsive.
    * To address this, Node.js provides the **`cluster` module**. This module allows you to fork multiple Node.js processes, each running on a separate CPU core. Each child process has its own Event Loop and can handle requests independently. This enables true **parallelism** and makes your Node.js application more scalable for multi-core systems.

7.  **Worker Threads (for finer-grained parallelism):**
    * Introduced later, **Worker Threads** provide a way to run JavaScript code in separate threads within the same Node.js process. Unlike the `cluster` module, which forks entire processes, worker threads offer finer-grained control and can share memory (though careful synchronization is needed to avoid race conditions). This is useful for offloading CPU-intensive tasks without the overhead of creating entirely new processes.

**In summary:**

Node.js achieves concurrency primarily through its **single-threaded, event-driven, non-blocking I/O model**. 
It doesn't use traditional multi-threading for JavaScript execution but intelligently delegates I/O operations and long-running tasks to underlying system calls and a thread pool. 
For true parallelism and handling CPU-intensive workloads, it provides the `cluster` module and `worker_threads` to leverage multiple CPU cores. This architecture makes Node.js highly efficient 
for building scalable network applications that handle many concurrent connections with minimal overhead.


create code using node typescript alongwith advanced concepts and optimized performance

Perfect, thanks for sharing the task.  
The assignment is asking you to:

1. **Create a Node TypeScript project.**  
2. **Write two functions** to fetch results from **PokéAPI**:
   - `https://pokeapi.co/api/v2/pokemon` → list of Pokémon.
   - `https://pokeapi.co/api/v2/pokemon/{name}` → details of a Pokémon by name.
3. **Console log results** with clean, production-quality code.

Since you asked for **advanced concepts and optimized performance**, I’ll include:
- **TypeScript strict typing**.  
- **Axios** for HTTP requests with proper error handling.  
- **Generics and async/await**.  
- **Caching** to avoid redundant API calls.  
- **Separation of concerns** (services, types, utils).  
- **Retry logic with exponential backoff** for resilience.

***

## 📂 Project Structure

```
pokemon-api/
│── src/
│   ├── index.ts
│   ├── services/
│   │   └── pokemonService.ts
│   ├── types/
│   │   └── pokemonTypes.ts
│   └── utils/
│       └── httpClient.ts
│── tsconfig.json
│── package.json
```

***

## 🔹 `package.json`
```json
{
  "name": "pokemon-api",
  "version": "1.0.0",
  "main": "dist/index.js",
  "scripts": {
    "dev": "ts-node src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js"
  },
  "dependencies": {
    "axios": "^1.5.0"
  },
  "devDependencies": {
    "typescript": "^5.3.3",
    "ts-node": "^10.9.1"
  }
}
```

***

## 🔹 `tsconfig.json`
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "outDir": "dist",
    "strict": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  }
}
```

***

## 🔹 `src/types/pokemonTypes.ts`
```ts
export interface PokemonListResponse {
  count: number;
  results: { name: string; url: string }[];
}

export interface PokemonDetails {
  id: number;
  name: string;
  height: number;
  weight: number;
  abilities: { ability: { name: string } }[];
  sprites: { front_default: string };
}
```

***

## 🔹 `src/utils/httpClient.ts`  
(A wrapper around Axios for retries and caching)

```ts
import axios, { AxiosInstance, AxiosResponse } from "axios";

class HttpClient {
  private client: AxiosInstance;
  private cache = new Map<string, any>();

  constructor(baseURL: string) {
    this.client = axios.create({ baseURL, timeout: 5000 });
  }

  private async retry<T>(fn: () => Promise<AxiosResponse<T>>, retries = 3, delay = 500): Promise<T> {
    try {
      const response = await fn();
      return response.data;
    } catch (error) {
      if (retries > 0) {
        console.warn(`Retrying... attempts left: ${retries}`);
        await new Promise((res) => setTimeout(res, delay));
        return this.retry(fn, retries - 1, delay * 2);
      }
      throw error;
    }
  }

  async get<T>(url: string): Promise<T> {
    if (this.cache.has(url)) {
      return this.cache.get(url);
    }
    const data = await this.retry<T>(() => this.client.get(url));
    this.cache.set(url, data);
    return data;
  }
}

export const httpClient = new HttpClient("https://pokeapi.co/api/v2");
```

***

## 🔹 `src/services/pokemonService.ts`
```ts
import { httpClient } from "../utils/httpClient";
import { PokemonListResponse, PokemonDetails } from "../types/pokemonTypes";

export class PokemonService {
  static async getPokemonList(limit = 10): Promise<PokemonListResponse> {
    return await httpClient.get<PokemonListResponse>(`/pokemon?limit=${limit}`);
  }

  static async getPokemonDetails(name: string): Promise<PokemonDetails> {
    return await httpClient.get<PokemonDetails>(`/pokemon/${name.toLowerCase()}`);
  }
}
```

***

## 🔹 `src/index.ts`
```ts
import { PokemonService } from "./services/pokemonService";

const main = async () => {
  try {
    console.log("Fetching Pokémon list...");
    const list = await PokemonService.getPokemonList(5);
    console.log("Pokémon List:", list.results.map(p => p.name));

    console.log("\nFetching details for Pikachu...");
    const pikachu = await PokemonService.getPokemonDetails("pikachu");
    console.log("Pikachu Details:", {
      id: pikachu.id,
      name: pikachu.name,
      height: pikachu.height,
      weight: pikachu.weight,
      abilities: pikachu.abilities.map(a => a.ability.name),
      sprite: pikachu.sprites.front_default
    });

  } catch (error) {
    console.error("Error:", (error as Error).message);
  }
};

main();
```

***

## 🚀 Features Included
✔ **Error handling with retries**  
✔ **Caching responses** to avoid redundant API calls  
✔ **TypeScript strict typing** for safer code  
✔ **Production-ready modular structure**  
✔ **Extensible (you can add more services easily)**  

